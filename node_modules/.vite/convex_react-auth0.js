import {
  ConvexProvider
} from "./chunk-HN7PX6C2.js";
import {
  Auth0Provider,
  useAuth0
} from "./chunk-MPZIHLID.js";
import "./chunk-ZLGVB7DP.js";
import {
  require_react
} from "./chunk-LCSUUI4Z.js";
import {
  __toESM
} from "./chunk-32SO2RNX.js";

// node_modules/convex/dist/esm/react-auth0/ConvexProviderWithAuth0.js
var import_react = __toESM(require_react(), 1);
var ConvexProviderWithAuth0 = ({ children, client, authInfo, loading, loggedOut }) => {
  if (!authInfo) {
    throw new Error("ConvexProviderWithAuth0 component requires authInfo. Run `convex auth add` to register your auth provider and pass config.authInfo[0] as the authInfo prop.");
  }
  let domain = authInfo.domain;
  if (domain.startsWith("https://")) {
    domain = domain.slice(8);
  }
  if (domain.endsWith("/")) {
    domain = domain.slice(0, -1);
  }
  return import_react.default.createElement(Auth0Provider, {
    domain,
    clientId: authInfo.applicationID,
    redirectUri: typeof window === "undefined" ? void 0 : window.location.origin,
    cacheLocation: "localstorage"
  }, import_react.default.createElement(ConvexProviderUsingAuth0, {
    client,
    loading,
    loggedOut
  }, children));
};
function ConvexProviderUsingAuth0({ children, client, loading, loggedOut }) {
  const { isAuthenticated, isLoading, getIdTokenClaims, loginWithRedirect } = useAuth0();
  const [clientAuthed, setClientAuthed] = (0, import_react.useState)(false);
  loggedOut = loggedOut || import_react.default.createElement("button", { onClick: loginWithRedirect }, "Log in");
  loading = loading || import_react.default.createElement(import_react.default.Fragment, null, null);
  (0, import_react.useEffect)(() => {
    async function setAuth() {
      const claims = await getIdTokenClaims();
      const token = claims.__raw;
      client.setAuth(token);
      setClientAuthed(true);
    }
    if (isAuthenticated) {
      setAuth();
      return () => client.clearAuth();
    }
  }, [isAuthenticated, getIdTokenClaims, isLoading, client]);
  if (isLoading || isAuthenticated && !clientAuthed) {
    return loading;
  } else if (!isAuthenticated) {
    return loggedOut;
  }
  return import_react.default.createElement(ConvexProvider, { client }, children);
}
export {
  ConvexProviderWithAuth0
};
//# sourceMappingURL=convex_react-auth0.js.map
