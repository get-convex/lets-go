import { convexToJson, Id, jsonToConvex, Value } from "@convex-dev/common";
import { performSyscall } from "./syscall.js";
import { DatabaseReader, DatabaseWriter } from "../database.js";
import { TableImpl } from "./query_impl.js";
import { AnyDataModel } from "../data_model.js";

export function setupReader(): DatabaseReader<AnyDataModel> {
  return {
    get: (id: Id) => {
      const syscallJSON = performSyscall("get", { id: convexToJson(id) });
      const syscallResult = jsonToConvex(syscallJSON);
      return Promise.resolve(syscallResult);
    },
    table: (tableName: string) => new TableImpl(tableName),
  };
}

export function setupWriter(): DatabaseWriter<AnyDataModel> {
  const reader = setupReader();
  return {
    get: reader.get,
    table: reader.table,

    insert: (table, value) => {
      const syscallJSON = performSyscall("insert", {
        table,
        value: convexToJson(value),
      });
      const syscallResult = jsonToConvex(syscallJSON) as any;
      return syscallResult._id;
    },
    patch: (id, value) => {
      performSyscall("update", {
        id: convexToJson(id),
        value: convexToJson(value as Value),
      });
    },
    replace: (id, value) => {
      performSyscall("replace", {
        id: convexToJson(id),
        value: convexToJson(value),
      });
    },
    delete: id => {
      performSyscall("remove", { id: convexToJson(id) });
    },
  };
}
