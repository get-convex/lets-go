import * as Base64 from "base64-js";
import { z } from "zod";
import { JSONValue } from "@convex-dev/common";
import Long from "long";

/**
 * Shared schema
 */

// Taken from https://github.com/colinhacks/zod#json-type
const jsonSchema: z.ZodSchema<JSONValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.null(),
    z.array(jsonSchema),
    z.record(jsonSchema),
  ])
);

const u64Schema = z
  .string()
  .refine(arg => Base64.byteLength(arg) == 8)
  .transform(arg => {
    const integerBytes = Base64.toByteArray(arg);
    return Long.fromBytesLE(Array.from(integerBytes), true);
  });

/**
 * Validator for {@link QueryId}.
 */
export const queryIdSchema = z.number().int().nonnegative();

/**
 * Unique nonnegative integer identifying a single query.
 */
export type QueryId = z.infer<typeof queryIdSchema>;

const querySetVersionSchema = z.number().int().nonnegative();
export type QuerySetVersion = z.infer<typeof querySetVersionSchema>;

const mutationIdSchema = z.number().int().nonnegative();
export type MutationId = z.infer<typeof mutationIdSchema>;

const identityVersionSchema = z.number().int().nonnegative();
export type IdentityVersion = z.infer<typeof identityVersionSchema>;

/**
 * Client message schema
 */

const connectSchema = z.object({
  type: z.literal("Connect"),
  sessionId: z.string(),
  connectionCount: z.number().int().nonnegative(),
});

const addQuerySchema = z.object({
  type: z.literal("Add"),
  queryId: queryIdSchema,
  udfPath: z.string(),
  args: z.array(jsonSchema),
});
export type AddQuery = z.infer<typeof addQuerySchema>;

const removeQuerySchema = z.object({
  type: z.literal("Remove"),
  queryId: queryIdSchema,
});
export type RemoveQuery = z.infer<typeof removeQuerySchema>;

const querySetModificationSchema = z.object({
  type: z.literal("ModifyQuerySet"),
  baseVersion: querySetVersionSchema,
  newVersion: querySetVersionSchema,
  modifications: z.array(z.union([addQuerySchema, removeQuerySchema])),
});
export type QuerySetModification = z.infer<typeof querySetModificationSchema>;

const mutationSchema = z.object({
  type: z.literal("Mutation"),
  mutationId: mutationIdSchema,
  udfPath: z.string(),
  args: z.array(jsonSchema),
});
export type Mutation = z.infer<typeof mutationSchema>;

const authenticateSchema = z.discriminatedUnion("tokenType", [
  z.object({
    type: z.literal("Authenticate"),
    tokenType: z.literal("Admin"),
    value: z.string(),
    baseVersion: identityVersionSchema,
  }),
  z.object({
    type: z.literal("Authenticate"),
    tokenType: z.literal("User"),
    value: z.string(),
    baseVersion: identityVersionSchema,
  }),
  z.object({
    type: z.literal("Authenticate"),
    tokenType: z.literal("None"),
    baseVersion: identityVersionSchema,
  }),
]);
export type Authenticate = z.infer<typeof authenticateSchema>;
const clientSchema = z.union([
  connectSchema,
  querySetModificationSchema,
  mutationSchema,
  authenticateSchema,
]);
export type ClientMessage = z.infer<typeof clientSchema>;

/**
 * Server message schema
 */
const tsSchema = u64Schema;
const logLinesSchema = z.array(z.string());

const stateVersionSchema = z.object({
  querySet: queryIdSchema,
  ts: tsSchema,
  identity: identityVersionSchema,
});
export type StateVersion = z.infer<typeof stateVersionSchema>;

const stateModificationSchema = z.discriminatedUnion("type", [
  z.object({
    type: z.literal("QueryUpdated"),
    queryId: queryIdSchema,
    value: jsonSchema,
    logLines: logLinesSchema,
  }),
  z.object({
    type: z.literal("QueryFailed"),
    queryId: queryIdSchema,
    errorMessage: z.string(),
    logLines: logLinesSchema,
  }),
  z.object({
    type: z.literal("QueryRemoved"),
    queryId: queryIdSchema,
  }),
]);
const transitionSchema = z.object({
  type: z.literal("Transition"),
  startVersion: stateVersionSchema,
  endVersion: stateVersionSchema,
  modifications: z.array(stateModificationSchema),
});
export type Transition = z.infer<typeof transitionSchema>;

const mutationSuccessSchema = z.object({
  type: z.literal("MutationResponse"),
  mutationId: mutationIdSchema,
  success: z.literal(true),
  result: jsonSchema,
  ts: tsSchema,
  logLines: logLinesSchema,
});
const mutationFailedSchema = z.object({
  type: z.literal("MutationResponse"),
  mutationId: mutationIdSchema,
  success: z.literal(false),
  result: z.string(),
  logLines: logLinesSchema,
});
const mutationResponseSchema = z.discriminatedUnion("success", [
  mutationSuccessSchema,
  mutationFailedSchema,
]);
export type MutationResponse = z.infer<typeof mutationResponseSchema>;
const fatalErrorSchema = z.object({
  type: z.literal("FatalError"),
  error: z.string(),
});

export const serverSchema = z.union([
  transitionSchema,
  mutationResponseSchema,
  fatalErrorSchema,
]);
export type ServerMessage = z.infer<typeof serverSchema>;
