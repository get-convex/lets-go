/**
 * All of the utility types to describe a Convex API of queries and mutations
 */

/**
 * Description of the Convex functions available to an application.
 *
 * This is a generic type that expresses the shape of API types created by
 * `npx convex codegen`. It's used to make the Convex clients type-safe.
 *
 * @public
 */
export type GenericAPI = {
  queries: Record<string, (...args: any[]) => any>;
  mutations: Record<string, (...args: any[]) => any>;
};

/**
 * Helper types for interacting with the overall API type
 */

/**
 * The names of query functions in a Convex API.
 *
 * @public
 */
export type QueryNames<API extends GenericAPI> = keyof API["queries"];

/**
 * The names of mutation functions in a Convex API.
 *
 * @public
 */
export type MutationNames<API extends GenericAPI> = keyof API["mutations"];

/**
 * The type of a query function in a Convex API.
 *
 * @public
 */
export type NamedQuery<
  API extends GenericAPI,
  Name extends QueryNames<API>
> = API["queries"][Name];

/**
 * The type of a mutation function in a Convex API.
 *
 * @public
 */
export type NamedMutation<
  API extends GenericAPI,
  Name extends MutationNames<API>
> = API["mutations"][Name];
