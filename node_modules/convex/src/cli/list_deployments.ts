import axios from "axios";
import { version } from "../index.js";
import chalk from "chalk";
import { Command } from "commander";
import { provisionHost } from "./config.js";
import {
  BETA_KEY_DEPRECATION_MESSAGE,
  BETA_KEY_OPTION,
  deprecationCheck,
  flushAndExit,
  getAuthHeader,
  printServerErr,
} from "./utils.js";

export const listDeployments = new Command("list-deployments")
  .description("List all of your Convex deployments.")
  .addOption(BETA_KEY_OPTION)
  .option("--json", "Output the deployment metadata in machine-readable JSON")
  .action(async options => {
    const betaKey = options.betaKey;
    if (betaKey) {
      console.error(chalk.yellow(BETA_KEY_DEPRECATION_MESSAGE));
    }
    const authHeader = await getAuthHeader();
    const headers: Record<string, string> = authHeader
      ? { Authorization: authHeader }
      : {};
    const url = `${provisionHost}/api/${version}/list_instances`;
    const client = axios.create();
    let deployments;
    try {
      const response = await client.post(url, { betaKey }, { headers });
      deprecationCheck(response);
      deployments = response.data.instances;
    } catch (err: any) {
      console.error(chalk.red("Error: Unable to list deployments"));
      printServerErr(err);
      return await flushAndExit(1, err);
    }
    if (options.json) {
      console.log(JSON.stringify(deployments));
    } else {
      for (let i = 0; i < deployments.length; i++) {
        const deployment = deployments[i];
        console.log(`Deployment ${i + 1}:`);
        console.log(`  Name: ${deployment.name}`);
        console.log(`  Active: ${deployment.active}`);
      }
    }
  });
