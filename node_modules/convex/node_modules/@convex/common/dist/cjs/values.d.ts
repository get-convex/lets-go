/**
 * The type of JavaScript values serializable to JSON.
 *
 * @public
 */
export declare type JSONValue = null | boolean | number | string | JSONValue[] | {
    [key: string]: JSONValue;
};
/**
 * An identifier for a document in Convex.
 *
 * Convex documents are uniquely identified by their `Id`, which is accessible
 * on the `_id` field. To learn more, see [Data Modeling](https://docs.convex.dev/using/data-modeling).
 *
 * Documents can be loaded using `db.get(id)` in query and mutation functions.
 *
 * **Important**: Use `myId.equals(otherId)` to check for equality.
 * Using `===` will not work because two different instances of `Id` can refer
 * to the same document.
 *
 * @public
 */
export declare class Id {
    private encoded;
    private constructor();
    /**
     * Check if this {@link Id} refers to the same document as another {@link Id}.
     *
     * @param other - The other {@link Id} to compare to.
     * @returns `true` if the objects refer to the same document.
     */
    equals(other: Id): boolean;
    /**
     * Parse an {@link Id} from its JSON representation.
     */
    static fromJSON(obj: any): Id;
    /**
     * Convert an {@link Id} into its JSON representation.
     */
    toJSON(): JSONValue;
    /**
     * Parse an {@link Id} from its string representation.
     */
    static fromString(s: string): Id;
    /**
     * Convert an {@link Id} into its string representation.
     */
    toString(): string;
}
/**
 * A value supported by Convex.
 *
 * Values can be:
 * - stored inside of documents.
 * - used as arguments and return types to queries and mutation functions.
 *
 * You can see the full set of supported types at
 * [Types](https://docs.convex.dev/using/types).
 *
 * @public
 */
export declare type Value = Id | null | bigint | number | boolean | string | ArrayBuffer | Value[] | Set<Value> | Map<Value, Value> | {
    [key: string]: Value;
};
/**
 * Parse a Convex value from its JSON representation.
 *
 * This function will revive classes like {@link Id} that have been serialized to JSON, parse out `BigInt`s, and so on.
 *
 * To learn more about Convex values, see [Types](https://docs.convex.dev/using/types).
 *
 * @param value - The JSON representation of a Convex value previously created with {@link convexToJson}.
 * @returns The JavaScript representation of the Convex value.
 *
 * @public
 */
export declare function jsonToConvex(value: JSONValue): Value;
/**
 * Convert a Convex value to its JSON representation.
 *
 * Use {@link jsonToConvex} to recreate the original value.
 *
 * To learn more about Convex values, see [Types](https://docs.convex.dev/using/types).
 *
 * @param value - A Convex value to convert into JSON.
 * @returns The JSON representation of `value`.
 *
 * @public
 */
export declare function convexToJson(value: Value): JSONValue;
//# sourceMappingURL=values.d.ts.map