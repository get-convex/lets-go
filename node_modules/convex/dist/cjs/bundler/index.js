"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.entryPoints = exports.bundleSchema = exports.bundleAll = exports.bundle = exports.BundleError = exports.walkDir = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const esbuild_1 = __importDefault(require("esbuild"));
function walkDir(dirPath) {
    return __asyncGenerator(this, arguments, function* walkDir_1() {
        var e_1, _a;
        try {
            for (var _b = __asyncValues(yield __await(promises_1.default.opendir(dirPath))), _c; _c = yield __await(_b.next()), !_c.done;) {
                const dirEntry = _c.value;
                const childPath = path_1.default.join(dirPath, dirEntry.name);
                if (dirEntry.isDirectory()) {
                    yield __await(yield* __asyncDelegator(__asyncValues(walkDir(childPath))));
                }
                else if (dirEntry.isFile()) {
                    yield yield __await(childPath);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
exports.walkDir = walkDir;
class BundleError extends Error {
}
exports.BundleError = BundleError;
function doEsbuild(dir, entryPoints, generateSourceMaps) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield esbuild_1.default.build({
                entryPoints,
                bundle: true,
                format: "esm",
                target: "esnext",
                outdir: "out",
                outbase: dir,
                write: false,
                sourcemap: generateSourceMaps,
                splitting: true,
                chunkNames: "_deps/[hash]",
                treeShaking: true,
                minify: false,
            });
        }
        catch (err) {
            throw new BundleError(`esbuild failed: ${err.toString()}`);
        }
    });
}
function bundle(dir, entryPoints, generateSourceMaps) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = yield doEsbuild(dir, entryPoints, generateSourceMaps);
        if (result.errors.length) {
            for (const error of result.errors) {
                console.log(chalk_1.default.red(`esbuild error: ${error.text}`));
            }
            throw new BundleError("esbuild failed");
        }
        for (const warning of result.warnings) {
            console.log(chalk_1.default.yellow(`esbuild warning: ${warning.text}`));
        }
        const sourceMaps = new Map();
        const modules = [];
        for (const outputFile of result.outputFiles) {
            const relPath = path_1.default.relative(path_1.default.normalize("out"), outputFile.path);
            if (path_1.default.extname(relPath) === ".map") {
                sourceMaps.set(relPath, outputFile.text);
                continue;
            }
            modules.push({ path: relPath, source: outputFile.text });
        }
        for (const module of modules) {
            const sourceMapPath = module.path + ".map";
            const sourceMap = sourceMaps.get(sourceMapPath);
            if (sourceMap) {
                module.sourceMap = sourceMap;
            }
        }
        return modules;
    });
}
exports.bundle = bundle;
function bundleAll(dir, generateSourceMaps, verbose) {
    return __awaiter(this, void 0, void 0, function* () {
        const entries = yield entryPoints(dir, verbose);
        return bundle(dir, entries, generateSourceMaps);
    });
}
exports.bundleAll = bundleAll;
function bundleSchema(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        return bundle(dir, [path_1.default.resolve(dir, "schema.ts")], true);
    });
}
exports.bundleSchema = bundleSchema;
function entryPoints(dir, verbose) {
    var e_2, _a;
    return __awaiter(this, void 0, void 0, function* () {
        const entryPoints = [];
        try {
            for (var _b = __asyncValues(walkDir(dir)), _c; _c = yield _b.next(), !_c.done;) {
                const fpath = _c.value;
                const relPath = path_1.default.relative(dir, fpath);
                const base = path_1.default.parse(fpath).base;
                const log = (line) => {
                    if (verbose) {
                        console.log(line);
                    }
                };
                if (relPath.startsWith("_deps/")) {
                    throw new Error(`The path "${fpath}" is within the "_deps" directory, which is reserved for dependencies. Please move your code to another directory.`);
                }
                else if (relPath.startsWith("_generated/")) {
                    log(chalk_1.default.yellow(`Skipping ${fpath}`));
                }
                else if (base.startsWith(".")) {
                    log(chalk_1.default.yellow(`Skipping dotfile ${fpath}`));
                }
                else if (base === "README.md") {
                    log(chalk_1.default.yellow(`Skipping ${fpath}`));
                }
                else if (base === "_generated.ts") {
                    log(chalk_1.default.yellow(`Skipping ${fpath}`));
                }
                else if (base === "schema.ts") {
                    log(chalk_1.default.yellow(`Skipping ${fpath}`));
                }
                else if (base.includes(".test.")) {
                    log(chalk_1.default.yellow(`Skipping ${fpath}`));
                }
                else {
                    log(chalk_1.default.green(`Preparing ${fpath}`));
                    entryPoints.push(fpath);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return entryPoints;
    });
}
exports.entryPoints = entryPoints;
//# sourceMappingURL=index.js.map