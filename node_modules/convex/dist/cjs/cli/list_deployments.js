"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listDeployments = void 0;
const axios_1 = __importDefault(require("axios"));
const index_js_1 = require("../index.js");
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = require("commander");
const config_js_1 = require("./config.js");
const utils_js_1 = require("./utils.js");
exports.listDeployments = new commander_1.Command("list-deployments")
    .description("List all of your Convex deployments.")
    .addOption(utils_js_1.BETA_KEY_OPTION)
    .option("--json", "Output the deployment metadata in machine-readable JSON")
    .action((options) => __awaiter(void 0, void 0, void 0, function* () {
    const betaKey = options.betaKey;
    if (betaKey) {
        console.error(chalk_1.default.yellow(utils_js_1.BETA_KEY_DEPRECATION_MESSAGE));
    }
    const authHeader = yield (0, utils_js_1.getAuthHeader)();
    const headers = authHeader
        ? { Authorization: authHeader }
        : {};
    const url = `${config_js_1.provisionHost}/api/${index_js_1.version}/list_instances`;
    const client = axios_1.default.create();
    let deployments;
    try {
        const response = yield client.post(url, { betaKey }, { headers });
        (0, utils_js_1.deprecationCheck)(response);
        deployments = response.data.instances;
    }
    catch (err) {
        console.error(chalk_1.default.red("Error: Unable to list deployments"));
        (0, utils_js_1.printServerErr)(err);
        return yield (0, utils_js_1.flushAndExit)(1, err);
    }
    if (options.json) {
        console.log(JSON.stringify(deployments));
    }
    else {
        for (let i = 0; i < deployments.length; i++) {
            const deployment = deployments[i];
            console.log(`Deployment ${i + 1}:`);
            console.log(`  Name: ${deployment.name}`);
            console.log(`  Active: ${deployment.active}`);
        }
    }
}));
//# sourceMappingURL=list_deployments.js.map