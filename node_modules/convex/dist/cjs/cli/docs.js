"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.docs = void 0;
const axios_1 = __importDefault(require("axios"));
const commander_1 = require("commander");
const open_1 = __importDefault(require("open"));
const config_js_1 = require("./config.js");
const index_js_1 = require("../index.js");
const chalk_1 = __importDefault(require("chalk"));
const promises_1 = __importDefault(require("fs/promises"));
const utils_js_1 = require("./utils.js");
function openDocs(toOpen, cookie) {
    let docsUrl = "https://docs.convex.dev";
    if (cookie !== undefined) {
        docsUrl += "/?t=" + cookie;
    }
    if (toOpen) {
        (0, open_1.default)(docsUrl);
        console.log(chalk_1.default.green("Docs have launched! Check your browser."));
    }
    else {
        console.log(chalk_1.default.green(`Find Convex docs here: ${docsUrl}`));
    }
}
exports.docs = new commander_1.Command("docs")
    .description("Launch Convex docs")
    .option("--deployment-type <type>", "Type of deployment to open the docs for (`convex.<type>.json`). Defaults to `convex.json`")
    .option("--no-open", "Print docs URL instead of opening it in your browser")
    .action((options) => __awaiter(void 0, void 0, void 0, function* () {
    const configFn = (0, config_js_1.configName)(options.deploymentType);
    const configPath = yield (0, config_js_1.configFilepath)(configFn);
    let localConfig;
    try {
        localConfig = (0, config_js_1.parseConfig)(JSON.parse(yield promises_1.default.readFile(configPath, { encoding: "utf-8" })));
    }
    catch (err) {
        openDocs(options.open);
        return yield (0, utils_js_1.flushAndExit)(0);
    }
    const getCookieUrl = `${config_js_1.provisionHost}/api/${index_js_1.version}/get_cookie/${localConfig.instanceName}`;
    const client = axios_1.default.create();
    client
        .get(getCookieUrl)
        .then(res => {
        (0, utils_js_1.deprecationCheck)(res);
        openDocs(options.open, res.data.cookie);
    })
        .catch(() => openDocs(options.open));
}));
//# sourceMappingURL=docs.js.map