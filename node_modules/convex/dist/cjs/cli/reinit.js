"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reinit = void 0;
const axios_1 = __importDefault(require("axios"));
const index_js_1 = require("../index.js");
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = require("commander");
const config_js_1 = require("./config.js");
const utils_js_1 = require("./utils.js");
exports.reinit = new commander_1.Command("reinit")
    .description("Reinitialize a Convex app in the local directory if you've lost your convex.json and .env.local files")
    .addOption(utils_js_1.BETA_KEY_OPTION)
    .option("--deployment-name <name>", "The name of the deployment you'd like to reinitialize. If you don't know it, you can list all of your deployments with `convex list-deployments`.")
    .option("--deployment-type <type>", "Type of deployment to create (`convex.<type>.json`). Defaults to `convex.json`")
    .action((options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const deploymentType = (_a = options.deploymentType) !== null && _a !== void 0 ? _a : null;
    const configFn = (0, config_js_1.configName)(deploymentType);
    if (yield (0, utils_js_1.exists)(configFn)) {
        console.error(chalk_1.default.red(`File "${configFn}" already exists.`));
        console.error("If you'd like to regenerate it, delete the file and rerun `convex reinit`");
        return yield (0, utils_js_1.flushAndExit)(1);
    }
    const envFn = (0, config_js_1.envFilename)(deploymentType);
    const env = yield (0, config_js_1.readEnv)(deploymentType);
    if (env !== null) {
        console.error(chalk_1.default.red(`File "${envFn}" already exists.`));
        console.error("If you'd like to regenerate it, delete the file and rerun `convex reinit`");
        return yield (0, utils_js_1.flushAndExit)(1);
    }
    const deploymentName = options.deploymentName;
    if (deploymentName === undefined) {
        console.error(chalk_1.default.red(`The "--deployment-name" flag is required to reinitialize a project.`));
        console.error(chalk_1.default.red("If you don't know your deployment name, you can list all of your deployments with `convex list-deployments`."));
        return yield (0, utils_js_1.flushAndExit)(1);
    }
    if (options.betaKey) {
        console.error(chalk_1.default.yellow(utils_js_1.BETA_KEY_DEPRECATION_MESSAGE));
    }
    const authHeader = yield (0, utils_js_1.getAuthHeader)();
    const headers = authHeader
        ? { Authorization: authHeader }
        : {};
    const url = `${config_js_1.provisionHost}/api/${index_js_1.version}/reinitialize`;
    const client = axios_1.default.create();
    let data;
    try {
        const response = yield client.post(url, {
            betaKey: options.betaKey,
            instanceName: deploymentName,
        }, { headers });
        (0, utils_js_1.deprecationCheck)(response);
        data = response.data;
    }
    catch (err) {
        console.error(chalk_1.default.red("Error: Unable to reinitialize deployment"));
        (0, utils_js_1.printServerErr)(err);
        return yield (0, utils_js_1.flushAndExit)(1, err);
    }
    if (deploymentName !== data.instanceName) {
        throw new Error(`Reinitialized different deployment ${data.instanceName}, expected ${deploymentName}`);
    }
    const instanceOrigin = data.url;
    const adminKey = data.adminKey;
    const { instanceConfig } = yield (0, config_js_1.pullConfig)(instanceOrigin, adminKey);
    yield (0, config_js_1.writeAdminKey)(options.deploymentType, adminKey);
    yield (0, config_js_1.writeInstanceConfig)(options.deploymentType, instanceConfig);
    console.log(chalk_1.default.green(`Successfully reinitialized ${deploymentName}!`));
    console.log("Configuration settings have been written to", chalk_1.default.bold(configFn));
    console.log("The admin key was written to", chalk_1.default.bold(envFn));
}));
//# sourceMappingURL=reinit.js.map