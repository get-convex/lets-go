"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataModelCodegenWithoutSchema = exports.dataModelCodegen = void 0;
const common_js_1 = require("./common.js");
function dataModelCodegen() {
    return `
  ${(0, common_js_1.header)("Generated data model types.")}
  import { SchemaDefinition, TableDefinition } from "convex/schema";
  import schema from "../schema";
  
  type Schema = typeof schema extends SchemaDefinition<infer Schema>
    ? Schema
    : never;

  /**
   * The names of all of your Convex tables.
   */
  export type TableNames = keyof Schema;
  
  /**
   * The type of a document stored in Convex.
   * 
   * @typeParam TableName - A string literal type of the table name (like "users").
   */
  export type Document<TableName extends TableNames> =
    Schema[TableName] extends TableDefinition<infer DocumentType, any>
      ? DocumentType
      : never;

  type Indexes<TableName extends TableNames> =
    Schema[TableName] extends TableDefinition<any, any, infer IndexType>
      ? IndexType
      : never;

  /**
   * A type describing your Convex data model.
   * 
   * This type includes information about what tables you have, the type of
   * documents stored in those tables, and the indexes defined on them.
   * 
   * This type is used to parameterize methods like \`queryGeneric\` and 
   * \`mutationGeneric\` to make them type-safe. 
   */
  export type DataModel = {
    [TableName in TableNames]: {
      document: Document<TableName>;
      indexes: Indexes<TableName>;
    };
  };`;
}
exports.dataModelCodegen = dataModelCodegen;
/**
 * Codegen used when there isn't a `schema.ts` file yet.
 *
 * Make sure that the exports of this are the same as the real version above.
 */
function dataModelCodegenWithoutSchema() {
    return `
  ${(0, common_js_1.header)("Generated data model types.")}
  import { AnyDataModel } from "convex/server";

  /**
   * No \`schema.ts\` file found!
   * 
   * This generated code has permissive types like \`Document = any\` because
   * Convex doesn't know your schema. If you'd like more type safety, see
   * https://docs.convex.dev/using/schemas for instructions on how to add a
   * schema file.
   * 
   * After you write a schema, rerun codegen with \`npx convex codegen\`.
   */
  
  /**
   * The names of all of your Convex tables.
   */
  export type TableNames = string;
    
  /**
   * The type of a document stored in Convex.
   */
  export type Document = any;

  /**
   * A type describing your Convex data model.
   * 
   * This type includes information about what tables you have, the type of
   * documents stored in those tables, and the indexes defined on them.
   * 
   * This type is used to parameterize methods like \`queryGeneric\` and 
   * \`mutationGeneric\` to make them type-safe. 
   */
  export type DataModel = AnyDataModel;`;
}
exports.dataModelCodegenWithoutSchema = dataModelCodegenWithoutSchema;
//# sourceMappingURL=dataModel.js.map