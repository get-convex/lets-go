"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildIndexes = void 0;
const axios_1 = __importDefault(require("axios"));
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const ora_1 = __importDefault(require("ora"));
const path_1 = __importDefault(require("path"));
const index_js_1 = require("../bundler/index.js");
const index_js_2 = require("../index.js");
const utils_js_1 = require("./utils.js");
function stringifyIndex(index) {
    return `${index.table}.${index.name} ${JSON.stringify(index.fields)}`;
}
function diffIndexes(indexes) {
    let indexDiff = "";
    if (indexes.dropped.length > 0) {
        indexDiff += "Delete the following indexes:\n";
        for (const index of indexes.dropped) {
            indexDiff += `[-] ${stringifyIndex(index)}\n`;
        }
    }
    if (indexes.added.length > 0) {
        indexDiff += "Add the following indexes:\n";
        for (const index of indexes.added) {
            indexDiff += `[+] ${stringifyIndex(index)}\n`;
        }
    }
    return indexDiff;
}
function buildIndexes(origin, adminKey, schemaDir, dryRun) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!fs_1.default.existsSync(path_1.default.resolve(schemaDir, "schema.ts"))) {
            // Don't do anything.
            return;
        }
        const bundles = yield (0, index_js_1.bundleSchema)(schemaDir);
        const spinner = (0, ora_1.default)({
            text: "Checking for changed table indexes...",
            stream: process.stdout,
        });
        if (!dryRun) {
            spinner.start();
        }
        try {
            const res = yield axios_1.default.post(`${origin}/api/${index_js_2.version}/build_indexes`, {
                bundle: bundles[0],
                adminKey,
                dryRun,
            });
            (0, utils_js_1.deprecationCheck)(res);
            const indexDiff = diffIndexes(res.data);
            if (indexDiff !== "") {
                console.log(chalk_1.default.bold(`\nIndexes ${dryRun ? "would" : "will"} be overwritten with the following changes:`));
                console.log(indexDiff);
            }
            if (dryRun) {
                return;
            }
            spinner.text = "Waiting for all table indexes to be backfilled...";
            yield waitForIndexesToBuild(origin, adminKey);
            res.data.added.length > 0
                ? spinner.succeed(chalk_1.default.green("Successfully backfilled table indexes."))
                : res.data.dropped.length > 0
                    ? spinner.succeed(chalk_1.default.green("Successfully dropped deleted table indexes."))
                    : spinner.stop();
        }
        catch (err) {
            spinner.fail(chalk_1.default.red("Error: Unable to build indexes on", origin));
            (0, utils_js_1.printServerErr)(err);
            return yield (0, utils_js_1.flushAndExit)(1, err);
        }
    });
}
exports.buildIndexes = buildIndexes;
function waitForIndexesToBuild(origin, adminKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const fetch = () => axios_1.default.get(`${origin}/api/${index_js_2.version}/get_indexes`, {
            headers: { Authorization: `Convex ${adminKey}` },
        });
        const validate = (result) => result.data.indexes.every(index => index.backfill.state === "done");
        yield (0, utils_js_1.poll)(fetch, validate);
    });
}
//# sourceMappingURL=indexes.js.map