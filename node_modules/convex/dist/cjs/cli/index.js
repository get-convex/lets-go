#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const init_js_1 = require("./init.js");
const push_js_1 = require("./push.js");
const dashboard_js_1 = require("./dashboard.js");
const deactivate_js_1 = require("./deactivate.js");
const docs_js_1 = require("./docs.js");
const index_js_1 = require("../index.js");
const auth_js_1 = require("./auth.js");
const codegen_js_1 = require("./codegen.js");
const list_deployments_js_1 = require("./list_deployments.js");
const reinit_js_1 = require("./reinit.js");
const update_js_1 = require("./update.js");
const typecheck_js_1 = require("./typecheck.js");
const login_js_1 = require("./login.js");
const chalk_1 = __importDefault(require("chalk"));
const Sentry = __importStar(require("@sentry/node"));
require("@sentry/tracing");
const utils_js_1 = require("./utils.js");
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const config_js_1 = require("./config.js");
// If you want to use `@sentry/tracing` in your project directly, use a named import instead:
// import * as SentryTracing from "@sentry/tracing"
// Unused named imports are not guaranteed to patch the global hub.
if (!process.env.CI && config_js_1.provisionHost == config_js_1.productionProvisionHost) {
    Sentry.init({
        dsn: "https://f9fa0306e3d540079cf40ce8c2ad9644@o1192621.ingest.sentry.io/6390839",
        release: "cli@" + index_js_1.version,
        tracesSampleRate: 0.2,
        beforeBreadcrumb: breadcrumb => {
            // Strip ANSI color codes from log lines that are sent as breadcrumbs.
            if (breadcrumb.message) {
                breadcrumb.message = (0, strip_ansi_1.default)(breadcrumb.message);
            }
            return breadcrumb;
        },
    });
}
const MINIMUM_MAJOR_VERSION = 14;
const nodeVersion = process.versions.node;
const majorVersion = parseInt(nodeVersion.split(".")[0], 10);
if (majorVersion < MINIMUM_MAJOR_VERSION) {
    console.log(chalk_1.default.red(`Your Node version ${nodeVersion} is too old. Convex requires at least Node v${MINIMUM_MAJOR_VERSION}.`));
    console.log(chalk_1.default.gray(`You can use ${chalk_1.default.bold("nvm")} (https://github.com/nvm-sh/nvm#installing-and-updating) to manage different versions of Node.`));
    console.log(chalk_1.default.gray("After installing `nvm`, install the latest version of Node with " +
        chalk_1.default.bold("`nvm install node`.")));
    console.log(chalk_1.default.gray("Then, activate the installed version in your terminal with " +
        chalk_1.default.bold("`nvm use`.")));
    (0, utils_js_1.flushAndExit)(1);
}
if (process.platform === "win32") {
    console.log(chalk_1.default.red("The Convex CLI does not currently support Windows. Read the docs for more information: https://docs.convex.dev/understanding/beta-state#windows-development."));
}
const program = new commander_1.Command();
program.name("convex");
program.description("The Convex deployment management CLI");
program.usage("command [options]");
program.addCommand(init_js_1.init);
program.addCommand(push_js_1.push);
program.addCommand(dashboard_js_1.dashboard);
program.addCommand(docs_js_1.docs);
program.addCommand(list_deployments_js_1.listDeployments);
program.addCommand(reinit_js_1.reinit);
program.addCommand(deactivate_js_1.deactivate);
program.addCommand(auth_js_1.auth);
program.addCommand(codegen_js_1.codegen);
program.addCommand(update_js_1.update);
program.addCommand(typecheck_js_1.typecheck);
program.addCommand(login_js_1.login);
program.version(index_js_1.version);
program.parseAsync(process.argv);
//# sourceMappingURL=index.js.map