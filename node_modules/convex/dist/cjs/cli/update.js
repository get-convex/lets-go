"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.update = void 0;
const commander_1 = require("commander");
const utils_js_1 = require("./utils.js");
const chalk_1 = __importDefault(require("chalk"));
exports.update = new commander_1.Command("update")
    .description("Print instructions to update the convex package")
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    let updateInstructions = "npm install convex@latest\n";
    const oldPackages = (yield (0, utils_js_1.loadPackageJson)()).filter((elt) => elt.name.startsWith("@convex-dev"));
    for (const pkg of oldPackages) {
        updateInstructions += `npm uninstall ${pkg.name}\n`;
    }
    console.log(chalk_1.default.green(`To view the Convex changelog, go to https://blog.convex.dev/tag/releases/\nWhen you are ready to upgrade, run the following commands:\n${updateInstructions}`));
}));
//# sourceMappingURL=update.js.map