"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dashboard = void 0;
const commander_1 = require("commander");
const chalk_1 = __importDefault(require("chalk"));
const config_js_1 = require("./config.js");
const open_1 = __importDefault(require("open"));
const axios_1 = __importDefault(require("axios"));
const index_js_1 = require("../index.js");
const utils_js_1 = require("./utils.js");
/** Pull the local config and overwrite the remote one. */
exports.dashboard = new commander_1.Command("dashboard")
    .description("Log into Convex with the local `.env.local` file and open the dashboard in the browser")
    .option("--no-open", "Don't automatically open the dashboard in the default browser")
    .option("--deployment-type <type>", "Type of deployment to show dashboard for (`convex.<type>.json`). Defaults to `convex.json`")
    .action((options) => __awaiter(void 0, void 0, void 0, function* () {
    const adminKey = (yield (0, config_js_1.mustReadEnv)(options.deploymentType)).adminKey;
    const { instanceConfig } = yield (0, config_js_1.readInstanceConfig)(options.deploymentType);
    const loginUrl = yield dashboardLogin(instanceConfig.origin, adminKey);
    if (options.open) {
        console.log(chalk_1.default.gray(`Opening ${loginUrl} in the default browser...`));
        yield (0, open_1.default)(loginUrl);
    }
    else {
        console.log(loginUrl);
    }
}));
function dashboardLogin(instanceOrigin, adminKey) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return (yield axios_1.default.post(`${instanceOrigin}/api/${index_js_1.version}/one_time_login_url`, {
                version: index_js_1.version,
                adminKey,
            })).data.loginUrl;
        }
        catch (err) {
            console.error(chalk_1.default.red("Error: Unable to login to dashboard at ", instanceOrigin));
            (0, utils_js_1.printServerErr)(err);
            return yield (0, utils_js_1.flushAndExit)(1, err);
        }
    });
}
//# sourceMappingURL=dashboard.js.map