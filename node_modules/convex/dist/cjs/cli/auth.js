"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.auth = void 0;
const commander_1 = require("commander");
const config_js_1 = require("./config.js");
const inquirer_1 = __importDefault(require("inquirer"));
const chalk_1 = __importDefault(require("chalk"));
const list = new commander_1.Command("list")
    .description("List the currently-configured identity providers")
    .action((_, command) => __awaiter(void 0, void 0, void 0, function* () {
    const options = command.parent.opts();
    const { instanceConfig } = yield (0, config_js_1.readInstanceConfig)(options.deploymentType);
    const auth = instanceConfig.authInfo;
    for (let i = 0; i < auth.length; i++) {
        console.log(`${i + 1}. Issuer: "${auth[i].domain}", Application ID: "${auth[i].applicationID}"`);
    }
}));
const rm = new commander_1.Command("remove")
    .description("Remove one or more identity providers from the config")
    .action((_, command) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const options = command.parent.opts();
    const { instanceConfig } = yield (0, config_js_1.readInstanceConfig)(options.deploymentType);
    const auth = instanceConfig.authInfo;
    if (auth.length == 0) {
        console.log(chalk_1.default.yellow("No identity providers configured -- nothing to remove."));
        return;
    }
    const answers = yield inquirer_1.default.prompt([
        {
            type: "checkbox",
            message: "Choose which provider(s) to delete:",
            choices: auth.map(info => {
                return {
                    name: `Issuer: "${info.domain}", Application ID: "${info.applicationID}"`,
                    value: info,
                };
            }),
            name: "providers",
        },
    ]);
    const toRemove = (_a = answers.providers) !== null && _a !== void 0 ? _a : [];
    if (toRemove.length == 0) {
        console.log(chalk_1.default.green("No providers selected for removal."));
        return;
    }
    const newAuth = auth.filter(oldInfo => toRemove.indexOf(oldInfo) < 0);
    if (options.verbose) {
        console.log(chalk_1.default.bold(`Removing ${toRemove.length} identity provider(s). After this operation, the following provider(s) will remain:`));
        for (let i = 0; i < newAuth.length; i++) {
            console.log(`${i + 1}. Issuer: "${newAuth[i].domain}", Application ID: "${newAuth[i].applicationID}"`);
        }
        prompt("Press enter to continue or ctrl-C to abort.\n");
    }
    const newConfig = instanceConfig;
    newConfig.authInfo = newAuth;
    yield (0, config_js_1.writeInstanceConfig)(options.deploymentType, newConfig);
    console.log(chalk_1.default.green("Configuration updated. Run `npx convex push` to sync these changes with your backend."));
}));
const add = new commander_1.Command("add")
    .description("Add an identity provider to the config")
    .action((_, command) => __awaiter(void 0, void 0, void 0, function* () {
    const options = command.parent.opts();
    const { instanceConfig } = yield (0, config_js_1.readInstanceConfig)(options.deploymentType);
    const newProviders = [];
    function ask() {
        return __awaiter(this, void 0, void 0, function* () {
            yield inquirer_1.default
                .prompt([
                {
                    type: "input",
                    name: "domain",
                    message: "Enter the identity provider's URL, (e.g. `https://accounts.google.com`):",
                    validate: iss => {
                        if (!iss.startsWith("https://")) {
                            return "URL must start with `https://`";
                        }
                        return true;
                    },
                },
                {
                    type: "input",
                    name: "applicationID",
                    message: "Enter your application/client ID with this identity provider:",
                    validate: id => {
                        if (id.startsWith('"')) {
                            return "Client ID should not be quoted";
                        }
                        return true;
                    },
                },
                {
                    type: "confirm",
                    name: "anotherOne",
                    message: "Would you like to add another provider?",
                    default: false,
                },
            ])
                .then((answers) => __awaiter(this, void 0, void 0, function* () {
                newProviders.push({
                    domain: answers.domain,
                    applicationID: answers.applicationID,
                });
                if (answers.anotherOne) {
                    yield ask();
                }
            }));
        });
    }
    yield ask();
    if (newProviders.length == 0) {
        console.log(chalk_1.default.yellow("No providers added; nothing to do."));
        return;
    }
    if (options.verbose) {
        console.log(chalk_1.default.bold("Will add the following identity providers:"));
        for (let i = 0; i < newProviders.length; i++) {
            console.log(`${i + 1}. Issuer: "${newProviders[i].domain}", Application ID: "${newProviders[i].applicationID}"`);
        }
        prompt("Press enter to continue or ctrl-C to abort.\n");
    }
    const config = instanceConfig;
    config.authInfo.push(...newProviders);
    yield (0, config_js_1.writeInstanceConfig)(options.deploymentType, config);
    console.log(chalk_1.default.green("Configuration updated. Run `npx convex push` to sync these changes with your backend."));
}));
exports.auth = new commander_1.Command("auth")
    .description("Modify the authentication settings for your Convex deployment")
    .option("--deployment-type <type>", "Type of deployment to edit the config for (`convex.<type>.json`). Defaults to `convex.json`")
    .option("-v, --verbose", "Show changes and prompt for confirmation")
    .addCommand(list)
    .addCommand(rm)
    .addCommand(add);
//# sourceMappingURL=auth.js.map