"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deactivate = void 0;
const axios_1 = __importDefault(require("axios"));
const commander_1 = require("commander");
const chalk_1 = __importDefault(require("chalk"));
const config_js_1 = require("./config.js");
const index_js_1 = require("../index.js");
const utils_js_1 = require("./utils.js");
const fs_1 = __importDefault(require("fs"));
exports.deactivate = new commander_1.Command("deactivate")
    .description("Deactivate an existing deployment associated with the Convex app in the current " +
    "directory. The data still lives on Convex's servers. If you " +
    "really want all data purged, please contact support@convex.dev")
    .addOption(utils_js_1.BETA_KEY_OPTION)
    .option("--deployment-type <type>", "Type of deployment to deactivate (`convex.<type>.json`). Defaults to `convex.json`")
    .option("--force", "Deactivate without prompt to confirm deactivation")
    .action((options) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.betaKey) {
        console.error(chalk_1.default.yellow(utils_js_1.BETA_KEY_DEPRECATION_MESSAGE));
    }
    console.log(chalk_1.default.red("Data on this deployment will no longer be accessible after deactivation."));
    if (!options.force) {
        yield (0, utils_js_1.prompt)("Are you sure you want to deactivate this deployment?\nPress enter to continue or ctrl-C to abort.\n");
    }
    const { instanceConfig } = yield (0, config_js_1.readInstanceConfig)(options.deploymentType);
    const authHeader = yield (0, utils_js_1.getAuthHeader)();
    const headers = authHeader
        ? { Authorization: authHeader }
        : {};
    const deactivateArgs = {
        betaKey: options.betaKey,
        instanceName: instanceConfig.instanceName,
    };
    const deactivateUrl = `${config_js_1.provisionHost}/api/${index_js_1.version}/deactivate`;
    const client = axios_1.default.create();
    try {
        const res = yield client.post(deactivateUrl, deactivateArgs, { headers });
        (0, utils_js_1.deprecationCheck)(res);
        // Remove the convex.json and .env.local for the now-inactive deployment
        fs_1.default.unlinkSync((0, config_js_1.configName)(options.deploymentType));
        const envLocal = (0, config_js_1.envFilename)(options.deploymentType);
        if (fs_1.default.existsSync(envLocal)) {
            fs_1.default.unlinkSync((0, config_js_1.envFilename)(options.deploymentType));
        }
        console.log(chalk_1.default.green(`Done! Your account now has ${res.data.redemptionsRemaining} deployments remaining.`));
    }
    catch (err) {
        console.error(chalk_1.default.red("Error: Unable to deactivate deployment"));
        (0, utils_js_1.printServerErr)(err);
        return yield (0, utils_js_1.flushAndExit)(1, err);
    }
}));
//# sourceMappingURL=deactivate.js.map