"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.login = void 0;
const commander_1 = require("commander");
const openid_client_1 = require("openid-client");
const utils_js_1 = require("./utils.js");
const open_1 = __importDefault(require("open"));
const fs_1 = __importDefault(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
const config_js_1 = require("./config.js");
const index_js_1 = require("../index.js");
const axios_1 = __importDefault(require("axios"));
// Per https://github.com/panva/node-openid-client/tree/main/docs#customizing
openid_client_1.custom.setHttpOptionsDefaults({
    timeout: 10000,
});
function writeGlobalConfig(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const dirName = (0, utils_js_1.rootDirectory)();
        if (!fs_1.default.existsSync(dirName)) {
            fs_1.default.mkdirSync(dirName);
        }
        const path = (0, utils_js_1.globalConfigPath)();
        try {
            fs_1.default.writeFileSync(path, JSON.stringify(config));
        }
        catch (err) {
            console.log(chalk_1.default.red(`Failed to write auth config to ${path} with error: ${err}`));
            return yield (0, utils_js_1.flushAndExit)(1, err);
        }
        console.log(chalk_1.default.green(`Successfully wrote your auth credentials to ${path}!`));
    });
}
function performDeviceAuthorization(auth0Client) {
    return __awaiter(this, void 0, void 0, function* () {
        // Device authorization flow follows this guide: https://github.com/auth0/auth0-device-flow-cli-sample/blob/9f0f3b76a6cd56ea8d99e76769187ea5102d519d/cli.js
        // Device Authorization Request - https://tools.ietf.org/html/rfc8628#section-3.1
        // Get authentication URL
        const handle = yield auth0Client.deviceAuthorization({
            scope: "openid email",
            audience: "https://console.convex.dev/api/",
        });
        // Device Authorization Response - https://tools.ietf.org/html/rfc8628#section-3.2
        // Open authentication URL
        const { verification_uri_complete, user_code, expires_in } = handle;
        console.log(`Opening ${verification_uri_complete} in your browser to log in...`);
        (0, open_1.default)(verification_uri_complete);
        console.log(`You should see the following code: ${user_code}. It expires in ${expires_in % 60 === 0
            ? `${expires_in / 60} minutes`
            : `${expires_in} seconds`}`);
        // Device Access Token Request - https://tools.ietf.org/html/rfc8628#section-3.4
        // Device Access Token Response - https://tools.ietf.org/html/rfc8628#section-3.5
        try {
            const tokens = yield handle.poll();
            if (typeof tokens.access_token == "string") {
                return tokens.access_token;
            }
            else {
                throw Error("Access token is missing");
            }
        }
        catch (err) {
            switch (err.error) {
                case "access_denied": // end-user declined the device confirmation prompt, consent or rules failed
                    console.error("Access denied.");
                    return yield (0, utils_js_1.flushAndExit)(1, err);
                case "expired_token": // end-user did not complete the interaction in time
                    console.error("Device flow expired.");
                    return yield (0, utils_js_1.flushAndExit)(1, err);
                default:
                    if (err instanceof openid_client_1.errors.OPError) {
                        console.error(`Error = ${err.error}; error_description = ${err.error_description}`);
                    }
                    else {
                        console.error(`Login failed with error: ${err}`);
                    }
                    return yield (0, utils_js_1.flushAndExit)(1, err);
            }
        }
    });
}
function performPasswordAuthentication(issuer, clientId, username, password) {
    return __awaiter(this, void 0, void 0, function* () {
        // Unfortunately, `openid-client` doesn't support the resource owner password credentials flow so we need to manually send the requests.
        const options = {
            method: "POST",
            url: new URL("/oauth/token", issuer).href,
            headers: { "content-type": "application/x-www-form-urlencoded" },
            data: new URLSearchParams({
                grant_type: "password",
                username: username,
                password: password,
                scope: "openid email",
                client_id: clientId,
                audience: "https://console.convex.dev/api/",
                // Note that there is no client secret provided, as Auth0 refuses to require it for untrusted apps.
            }),
        };
        try {
            const response = yield axios_1.default.request(options);
            if (typeof response.data.access_token == "string") {
                return response.data.access_token;
            }
            else {
                throw Error("Access token is missing");
            }
        }
        catch (err) {
            console.log(`Password flow failed: ${err}`);
            return yield (0, utils_js_1.flushAndExit)(1, err);
        }
    });
}
exports.login = new commander_1.Command("login")
    .description("Login to Convex")
    // These options are hidden from the help/usage message, but allow overriding settings for testing.
    .addOption(new commander_1.Option("--override-auth-url <url>").hideHelp())
    .addOption(new commander_1.Option("--override-auth-client <id>").hideHelp())
    .addOption(new commander_1.Option("--override-auth-username <username>").hideHelp())
    .addOption(new commander_1.Option("--override-auth-password <password>").hideHelp())
    .action((options, cmd) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    if (!!options.overrideAuthUsername !== !!options.overrideAuthPassword) {
        cmd.error("If overriding credentials, both username and password must be provided");
    }
    const issuer = (_a = options.overrideAuthUrl) !== null && _a !== void 0 ? _a : "https://auth.convex.dev";
    const auth0 = yield openid_client_1.Issuer.discover(issuer);
    const clientId = (_b = options.overrideAuthClient) !== null && _b !== void 0 ? _b : "HFtA247jp9iNs08NTLIB7JsNPMmRIyfi";
    const auth0Client = new auth0.Client({
        client_id: clientId,
        token_endpoint_auth_method: "none",
        id_token_signed_response_alg: "RS256",
    });
    let accessToken;
    if (options.overrideAuthUsername) {
        accessToken = yield performPasswordAuthentication(issuer, clientId, options.overrideAuthUsername, options.overrideAuthPassword);
    }
    else {
        accessToken = yield performDeviceAuthorization(auth0Client);
    }
    // Get access token from big-brain
    const client = axios_1.default.create();
    const authorizeArgs = {
        authnToken: accessToken,
    };
    try {
        const resp = yield client.post(`${config_js_1.provisionHost}/api/${index_js_1.version}/authorize`, authorizeArgs);
        // Write access token to file
        const globalConfig = { accessToken: resp.data.accessToken };
        writeGlobalConfig(globalConfig);
    }
    catch (err) {
        (0, utils_js_1.printServerErr)(err);
        return yield (0, utils_js_1.flushAndExit)(1, err);
    }
}));
//# sourceMappingURL=login.js.map