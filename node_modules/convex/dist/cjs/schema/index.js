"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineSchema = exports.SchemaDefinition = exports.defineTable = exports.TableDefinition = exports.s = void 0;
// Placeholder for a schema type because we currently don't use them at runtime
const dummySchemaType = null;
/**
 * The schema builder.
 *
 * This builder allows you to define the types of documents stored in Convex.
 * @public
 */
exports.s = {
    id() {
        return dummySchemaType;
    },
    null() {
        return dummySchemaType;
    },
    number() {
        return dummySchemaType;
    },
    bigint() {
        return dummySchemaType;
    },
    boolean() {
        return dummySchemaType;
    },
    string() {
        return dummySchemaType;
    },
    bytes() {
        return dummySchemaType;
    },
    array(values) {
        return dummySchemaType;
    },
    set(values) {
        return dummySchemaType;
    },
    map(keys, values) {
        return dummySchemaType;
    },
    object(schema) {
        return dummySchemaType;
    },
    union(...schemaTypes) {
        return dummySchemaType;
    },
};
/**
 * The definition of a table within a schema.
 *
 * This should be produced by using {@link defineTable}.
 * @public
 */
class TableDefinition {
    /**
     * @internal
     */
    constructor() {
        this.indexes = [];
    }
    /**
     * Define an index on this table.
     *
     * To learn about indexes, see [Defining Indexes](https://docs.convex.dev/using/indexes).
     *
     * @param name - The name of the index.
     * @param fields - The fields to index, in order. Must specify at least one
     * field.
     * @returns A {@link TableDefinition} with this index included.
     */
    index(name, fields) {
        this.indexes.push({ indexDescriptor: name, fields });
        return this;
    }
    /**
     * Export the contents of this definition.
     *
     * This is called internally by the Convex framework.
     * @internal
     */
    export() {
        return this.indexes;
    }
}
exports.TableDefinition = TableDefinition;
function defineTable(documentSchema) {
    // For now, ignore the document type because we're just using it for TypeScript
    // types.
    return new TableDefinition();
}
exports.defineTable = defineTable;
/**
 *
 * The definition of a Convex project schema.
 *
 * This should be produced by using {@link defineSchema}.
 * @public
 */
class SchemaDefinition {
    /**
     * @internal
     */
    constructor(tables) {
        this.tables = tables;
    }
    /**
     * Export the contents of this definition.
     *
     * This is called internally by the Convex framework.
     * @internal
     */
    export() {
        return JSON.stringify({
            tables: Object.entries(this.tables).map(([tableName, definition]) => ({
                tableName: tableName,
                indexes: definition.export(),
            })),
        });
    }
}
exports.SchemaDefinition = SchemaDefinition;
/**
 * Define the schema of this Convex project.
 *
 * This should be exported from a `schema.ts` file in your `convex/` directory
 * like:
 *
 * ```ts
 * export default defineSchema({
 *   ...
 * });
 * ```
 *
 * @param schema - A map from table name to {@link TableDefinition} for all of
 * the tables in this project.
 * @returns The schema.
 *
 * @public
 */
function defineSchema(schema) {
    return new SchemaDefinition(schema);
}
exports.defineSchema = defineSchema;
//# sourceMappingURL=index.js.map