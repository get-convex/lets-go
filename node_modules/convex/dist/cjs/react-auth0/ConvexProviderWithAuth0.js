"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvexProviderWithAuth0 = void 0;
const auth0_react_1 = require("@auth0/auth0-react");
const react_1 = __importStar(require("react"));
const index_js_1 = require("../react/index.js");
/**
 * A wrapper React component which provides a ConvexReactClient authenticated
 * with Auth0.
 *
 * Using this component requires
 * * installing the [Auth0 React SDK](/getting-started/basics/users-and-auth#install-the-auth0-react-sdk),
 * * [setting up an Auth0 app](/getting-started/basics/users-and-auth#getting-started-with-auth0), and
 * * [registering that app](/getting-started/basics/users-and-auth#setting-up-convex-with-your-chosen-identity-provider) with `npx convex auth add`.
 *
 *
 * ```tsx
 * function AppWrapper() {
 *   return (
 *     <ConvexProviderWithAuth0 client={convex} authInfo={authInfo}>
 *       <App/>
 *     </ConvexProviderWithAuth0>
 *   );
 * }
 * ```
 *
 * Using this component instead of [ConvexProvider](/api/modules/react#convexprovider)
 * makes the [useAuth0](https://auth0.com/docs/libraries/auth0-react)
 * hook available in addition to [useQuery](/generated-api/react#usequery),
 * [useMutation](/generated-api/react#usemutation), and
 * [useConvex](/generated-api/react#useconvex).
 *
 * If a user is not logged in, this component renders the loading prop
 * with a fallback of a simple "Log in" button if that prop is not passed in.
 * To write your own login component, use the
 * `loginWithRedirect` property of the return value of `useAuth0()`
 * in the click handler of your login button.
 *
 * ```tsx
 * function YourLoggedOutComponent() {
 *   const { loginWithRedirect } = useAuth0();
 *   return (
 *     <div>
 *       <h1>Please log in :)</h1>
 *       <button onClick={loginWithRedirect}>Log in</button>
 *     </div>
 *   );
 * }
 *
 * <ConvexProviderWithAuth0
 *   client={convex}
 *   authInfo={authInfo}
 *   loggedOut={<YourLoggedOutComponent/>}
 * >
 *   <App/>
 * </ConvexProviderWithAuth0>
 * ```
 *
 * @public
 */
const ConvexProviderWithAuth0 = ({ children, client, authInfo, loading, loggedOut }) => {
    if (!authInfo) {
        throw new Error("ConvexProviderWithAuth0 component requires authInfo. " +
            "Run `convex auth add` to register your auth provider " +
            "and pass config.authInfo[0] as the authInfo prop.");
    }
    let domain = authInfo.domain;
    if (domain.startsWith("https://")) {
        domain = domain.slice(8);
    }
    if (domain.endsWith("/")) {
        domain = domain.slice(0, -1);
    }
    return react_1.default.createElement(auth0_react_1.Auth0Provider, {
        domain: domain,
        clientId: authInfo.applicationID,
        redirectUri: typeof window === "undefined" ? undefined : window.location.origin,
        // allows auth0 to cache the authentication state locally
        cacheLocation: "localstorage",
    }, react_1.default.createElement(ConvexProviderUsingAuth0, {
        client,
        loading,
        loggedOut,
    }, children));
};
exports.ConvexProviderWithAuth0 = ConvexProviderWithAuth0;
function ConvexProviderUsingAuth0({ children, client, loading, loggedOut, }) {
    const { isAuthenticated, isLoading, getIdTokenClaims, loginWithRedirect } = (0, auth0_react_1.useAuth0)();
    const [clientAuthed, setClientAuthed] = (0, react_1.useState)(false);
    // default logged out and loading views
    loggedOut =
        loggedOut ||
            react_1.default.createElement("button", { onClick: loginWithRedirect }, "Log in");
    loading = loading || react_1.default.createElement(react_1.default.Fragment, null, null);
    (0, react_1.useEffect)(() => {
        function setAuth() {
            return __awaiter(this, void 0, void 0, function* () {
                const claims = yield getIdTokenClaims();
                const token = claims.__raw;
                client.setAuth(token);
                setClientAuthed(true);
            });
        }
        if (isAuthenticated) {
            setAuth();
            return () => client.clearAuth();
        }
    }, [isAuthenticated, getIdTokenClaims, isLoading, client]);
    if (isLoading || (isAuthenticated && !clientAuthed)) {
        return loading;
    }
    else if (!isAuthenticated) {
        return loggedOut;
    }
    return react_1.default.createElement(index_js_1.ConvexProvider, { client: client }, children);
}
//# sourceMappingURL=ConvexProviderWithAuth0.js.map