"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteQuerySet = void 0;
const common_1 = require("@convex-dev/common");
const long_1 = __importDefault(require("long"));
const logging_js_1 = require("../logging.js");
/**
 * A represention of the query results we've received on the current WebSocket
 * connection.
 */
class RemoteQuerySet {
    constructor(queryPath) {
        this.version = { querySet: 0, ts: long_1.default.fromNumber(0), identity: 0 };
        this.remoteQuerySet = new Map();
        this.queryPath = queryPath;
    }
    transition(transition) {
        var _a;
        const start = transition.startVersion;
        if (this.version.querySet !== start.querySet ||
            this.version.ts.notEquals(start.ts) ||
            this.version.identity !== start.identity) {
            throw new Error(`Invalid start version: ${start.ts}:${start.querySet}`);
        }
        for (const modification of transition.modifications) {
            switch (modification.type) {
                case "QueryUpdated": {
                    const queryPath = this.queryPath(modification.queryId);
                    if (queryPath) {
                        for (const line of modification.logLines) {
                            (0, logging_js_1.logToConsole)("info", "query", queryPath, line);
                        }
                    }
                    const value = (0, common_1.jsonToConvex)((_a = modification.value) !== null && _a !== void 0 ? _a : null);
                    this.remoteQuerySet.set(modification.queryId, {
                        success: true,
                        value,
                    });
                    break;
                }
                case "QueryFailed": {
                    const queryPath = this.queryPath(modification.queryId);
                    if (queryPath) {
                        for (const line of modification.logLines) {
                            (0, logging_js_1.logToConsole)("info", "query", queryPath, line);
                        }
                    }
                    this.remoteQuerySet.set(modification.queryId, {
                        success: false,
                        errorMessage: modification.errorMessage,
                    });
                    break;
                }
                case "QueryRemoved": {
                    this.remoteQuerySet.delete(modification.queryId);
                    break;
                }
                default: {
                    // Enforce that the switch-case is exhaustive.
                    // eslint-disable-next-line  @typescript-eslint/no-unused-vars
                    const _ = modification;
                    throw new Error(`Invalid modification ${modification}`);
                }
            }
        }
        this.version = transition.endVersion;
    }
    remoteQueryResults() {
        return this.remoteQuerySet;
    }
    timestamp() {
        return this.version.ts;
    }
}
exports.RemoteQuerySet = RemoteQuerySet;
//# sourceMappingURL=remote_query_set.js.map