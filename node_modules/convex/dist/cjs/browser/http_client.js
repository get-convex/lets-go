"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvexHttpClient = void 0;
const common_1 = require("@convex-dev/common");
const logging_js_1 = require("./logging.js");
/** Isomorphic `fetch` for Node.js and browser usage. */
const hasFetch = typeof window !== "undefined" && typeof window.fetch !== "undefined";
const fetch = hasFetch
    ? window.fetch
    : (...args) => Promise.resolve().then(() => __importStar(require("node-fetch"))).then(({ default: fetch }) => fetch(...args));
/**
 * A Convex client that runs queries and mutations over HTTP.
 *
 * This is appropriate for server-side code (like Netlify Lambdas) or non-reactive
 * webapps.
 *
 * If you're building a React app, consider using
 * {@link react.ConvexReactClient} instead.
 *
 *
 * @public
 */
class ConvexHttpClient {
    constructor(address) {
        this.address = `${address}/api/${common_1.version}`;
    }
    /**
     * Obtain the {@link ConvexHttpClient}'s URL to its backend.
     *
     * @returns The URL to the Convex backend, including the client's API version.
     */
    backendUrl() {
        return this.address;
    }
    /**
     * Set the authentication token to be used for subsequent queries and mutations.
     *
     * Should be called whenever the token changes (i.e. due to expiration and refresh).
     *
     * @param value - JWT-encoded OpenID Connect identity token.
     */
    setAuth(value) {
        this.auth = value;
    }
    /**
     * Clear the current authentication token if set.
     */
    clearAuth() {
        this.auth = undefined;
    }
    /**
     * Construct a new {@link Query}.
     *
     * @param name - The name of the query function.
     * @returns The {@link Query} object with that name.
     */
    query(name) {
        return (...args) => __awaiter(this, void 0, void 0, function* () {
            // Interpret the arguments as a Convex array, and then serialize
            // it to JSON.
            const argsJSON = JSON.stringify((0, common_1.convexToJson)(args));
            const argsComponent = encodeURIComponent(argsJSON);
            const url = `${this.address}/udf?path=${name}&args=${argsComponent}`;
            const headers = this.auth
                ? { Authorization: `Bearer ${this.auth}` }
                : {};
            const response = yield fetch(url, {
                credentials: "include",
                headers: headers,
            });
            if (!response.ok && response.status != common_1.STATUS_CODE_UDF_FAILED) {
                throw new Error(yield response.text());
            }
            const respJSON = yield response.json();
            const value = (0, common_1.jsonToConvex)(respJSON.value);
            for (const line of respJSON.logs) {
                (0, logging_js_1.logToConsole)("info", "query", name, line);
            }
            if (!respJSON.success) {
                throw (0, logging_js_1.createError)("query", name, value);
            }
            return value;
        });
    }
    /**
     * Construct a new {@link Mutation}.
     *
     * @param name - The name of the mutation function.
     * @returns The {@link Mutation} object with that name.
     */
    mutation(name) {
        return (...args) => __awaiter(this, void 0, void 0, function* () {
            // Interpret the arguments as a Convex array and then serialize to JSON.
            const body = JSON.stringify({
                path: name,
                args: (0, common_1.convexToJson)(args),
                tokens: [],
            });
            const headers = {
                "Content-Type": "application/json",
            };
            if (this.auth) {
                headers["Authorization"] = `Bearer ${this.auth}`;
            }
            const response = yield fetch(`${this.address}/udf`, {
                body,
                method: "POST",
                headers: headers,
                credentials: "include",
            });
            if (!response.ok && response.status != common_1.STATUS_CODE_UDF_FAILED) {
                throw new Error(yield response.text());
            }
            const respJSON = yield response.json();
            const value = (0, common_1.jsonToConvex)(respJSON.value);
            for (const line of respJSON.logs) {
                (0, logging_js_1.logToConsole)("info", "mutation", name, line);
            }
            if (!respJSON.success) {
                throw (0, logging_js_1.createError)("mutation", name, value);
            }
            return value;
        });
    }
}
exports.ConvexHttpClient = ConvexHttpClient;
//# sourceMappingURL=http_client.js.map