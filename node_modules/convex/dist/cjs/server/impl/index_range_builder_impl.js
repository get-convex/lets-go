"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexRangeBuilderImpl = void 0;
const common_1 = require("@convex-dev/common");
const index_range_builder_js_1 = require("../index_range_builder.js");
/**
 * @internal
 */
class IndexRangeBuilderImpl extends index_range_builder_js_1.IndexRange {
    constructor(range_expressions) {
        super();
        this.range_expressions = range_expressions;
    }
    static new() {
        return new IndexRangeBuilderImpl([]);
    }
    eq(fieldName, value) {
        return new IndexRangeBuilderImpl(this.range_expressions.concat({
            type: "Eq",
            fieldPath: fieldName,
            value: (0, common_1.convexToJson)(value),
        }));
    }
    gt(fieldName, value) {
        return new IndexRangeBuilderImpl(this.range_expressions.concat({
            type: "Gt",
            fieldPath: fieldName,
            value: (0, common_1.convexToJson)(value),
        }));
    }
    gte(fieldName, value) {
        return new IndexRangeBuilderImpl(this.range_expressions.concat({
            type: "Gte",
            fieldPath: fieldName,
            value: (0, common_1.convexToJson)(value),
        }));
    }
    lt(fieldName, value) {
        return new IndexRangeBuilderImpl(this.range_expressions.concat({
            type: "Lt",
            fieldPath: fieldName,
            value: (0, common_1.convexToJson)(value),
        }));
    }
    lte(fieldName, value) {
        return new IndexRangeBuilderImpl(this.range_expressions.concat({
            type: "Lte",
            fieldPath: fieldName,
            value: (0, common_1.convexToJson)(value),
        }));
    }
    export() {
        return this.range_expressions;
    }
}
exports.IndexRangeBuilderImpl = IndexRangeBuilderImpl;
//# sourceMappingURL=index_range_builder_impl.js.map