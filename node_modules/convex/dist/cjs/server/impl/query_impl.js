"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableImpl = void 0;
const common_1 = require("@convex-dev/common");
const syscall_js_1 = require("./syscall.js");
const filter_builder_impl_js_1 = require("./filter_builder_impl.js");
const index_range_builder_impl_js_1 = require("./index_range_builder_impl.js");
class TableImpl {
    constructor(tableName) {
        this.tableName = tableName;
    }
    primaryIndex() {
        return this.index("by_id");
    }
    index(indexName) {
        return new IndexedQueryImpl(this.tableName + "." + indexName);
    }
    fullTableScan() {
        return new QueryImpl({
            source: {
                type: "FullTableScan",
                tableName: this.tableName,
                order: "asc",
            },
            operators: [],
        });
    }
    order(order) {
        return this.fullTableScan().order(order);
    }
    filter(predicate) {
        return this.fullTableScan().filter(predicate);
    }
    limit(n) {
        return this.fullTableScan().limit(n);
    }
    collect() {
        return this.fullTableScan().collect();
    }
    take(n) {
        return this.fullTableScan().take(n);
    }
    paginate(cursor, options) {
        return this.fullTableScan().paginate(cursor, options);
    }
    first() {
        return this.fullTableScan().first();
    }
    unique() {
        return this.fullTableScan().unique();
    }
    [Symbol.asyncIterator]() {
        return this.fullTableScan()[Symbol.asyncIterator]();
    }
}
exports.TableImpl = TableImpl;
/**
 * @param type Whether the query was consumed or closed.
 * @throws An error indicating the query has been closed.
 */
function throwClosedError(type) {
    throw new Error(type === "consumed"
        ? "This query is closed and can't emit any more values."
        : "This query has been chained with another operator and can't be reused.");
}
class QueryImpl {
    constructor(query) {
        this.state = { type: "preparing", query };
    }
    takeQuery() {
        if (this.state.type !== "preparing") {
            throw new Error("A query can only be chained once and can't be chained after iteration begins.");
        }
        const query = this.state.query;
        this.state = { type: "closed" };
        return query;
    }
    startQuery() {
        if (this.state.type === "executing") {
            throw new Error("Iteration can only begin on a query once.");
        }
        if (this.state.type === "closed" || this.state.type === "consumed") {
            throwClosedError(this.state.type);
        }
        const query = this.state.query;
        const { queryId } = (0, syscall_js_1.performSyscall)("queryStream", { query });
        this.state = { type: "executing", queryId };
        return queryId;
    }
    closeQuery() {
        if (this.state.type === "executing") {
            const queryId = this.state.queryId;
            (0, syscall_js_1.performSyscall)("queryCleanup", { queryId });
        }
        this.state = { type: "consumed" };
    }
    order(order) {
        const query = this.takeQuery();
        query.source.order = order;
        return new QueryImpl(query);
    }
    filter(predicate) {
        const query = this.takeQuery();
        query.operators.push({
            filter: (0, filter_builder_impl_js_1.serializeExpression)(predicate(filter_builder_impl_js_1.filterBuilderImpl)),
        });
        return new QueryImpl(query);
    }
    limit(n) {
        const query = this.takeQuery();
        query.operators.push({ limit: n });
        return new QueryImpl(query);
    }
    [Symbol.asyncIterator]() {
        this.startQuery();
        return this;
    }
    next() {
        if (this.state.type === "closed" || this.state.type === "consumed") {
            throwClosedError(this.state.type);
        }
        // Allow calling `.next()` when the query is in "preparing" state to implicitly start the
        // query. This allows the developer to call `.next()` on the query without having to use
        // a `for await` statement.
        const queryId = this.state.type === "preparing" ? this.startQuery() : this.state.queryId;
        const { value, done } = (0, syscall_js_1.performSyscall)("queryStreamNext", { queryId });
        if (done) {
            this.closeQuery();
        }
        const convexValue = (0, common_1.jsonToConvex)(value);
        return Promise.resolve({ value: convexValue, done });
    }
    return() {
        this.closeQuery();
        return Promise.resolve({ done: true, value: undefined });
    }
    paginate(cursor, options) {
        var _a, _b;
        const query = this.takeQuery();
        const pageSize = (_a = options === null || options === void 0 ? void 0 : options.pageSize) !== null && _a !== void 0 ? _a : null;
        const maximumRowsRead = (_b = options === null || options === void 0 ? void 0 : options.maximumRowsRead) !== null && _b !== void 0 ? _b : null;
        const { page, isDone, continueCursor } = (0, syscall_js_1.performSyscall)("queryPage", {
            query,
            cursor,
            pageSize,
            maximumRowsRead,
        });
        const result = {
            page: page.map(common_1.jsonToConvex),
            isDone,
            continueCursor,
        };
        return Promise.resolve(result);
    }
    collect() {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const out = [];
            try {
                for (var _b = __asyncValues(this), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    out.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return out;
        });
    }
    take(n) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.limit(n).collect();
        });
    }
    first() {
        return __awaiter(this, void 0, void 0, function* () {
            const first_array = yield this.take(1);
            return first_array.length === 0 ? null : first_array[0];
        });
    }
    unique() {
        return __awaiter(this, void 0, void 0, function* () {
            const first_two_array = yield this.take(2);
            if (first_two_array.length === 0) {
                throw new Error("unique() query found no results");
            }
            if (first_two_array.length === 2) {
                throw new Error("unique() query returned more than one result");
            }
            return first_two_array[0];
        });
    }
}
class IndexedQueryImpl {
    constructor(indexName) {
        this.indexName = indexName;
    }
    range(indexRange) {
        const rangeBuilder = indexRange(index_range_builder_impl_js_1.IndexRangeBuilderImpl.new());
        return new QueryImpl({
            source: {
                type: "IndexRange",
                indexName: this.indexName,
                range: rangeBuilder.export(),
                order: "asc",
            },
            operators: [],
        });
    }
}
//# sourceMappingURL=query_impl.js.map