"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeQuery = exports.makeMutation = exports.queryGeneric = exports.mutationGeneric = void 0;
/**
 * Utilities for implementing server-side Convex query and mutation functions.
 *
 * ## Usage
 *
 * ### Code Generation
 *
 * This module is typically used alongside generated server code.
 *
 * To generate the server code, run `npx convex codegen` in your Convex project.
 * This will create a `convex/_generated/server.ts` file with the following
 * functions, typed for your schema:
 * - [query](https://docs.convex.dev/generated-api/server#query)
 * - [mutation](https://docs.convex.dev/generated-api/server#mutation)
 *
 * If you aren't using TypeScript and code generation, you can use these untyped
 * functions instead:
 * - {@link queryGeneric}
 * - {@link mutationGeneric}
 *
 * ### Example
 *
 * Convex functions are defined by using either the `query` or
 * `mutation` wrappers.
 *
 * Queries receive a `db` that implements the {@link DatabaseReader} interface.
 *
 * ```ts
 * import { query } from "./_generated/server";
 *
 * export default query(async ({ db }, ...args: any[]): Promise<any> => {
 *   // Your (read-only) code here!
 * });
 * ```
 *
 * If your function needs to write to the database, such as inserting, updating,
 * or deleting documents, use `mutation` instead which provides a `db` that
 * implements the {@link DatabaseWriter} interface.
 *
 * ```ts
 * import { mutation } from "./_generated/server";
 *
 * export default mutation(async ({ db }, ...args: any[]): Promise<any> => {
 *   // Your mutation code here!
 * });
 * ```
 * @module
 */
__exportStar(require("./database.js"), exports);
var registration_impl_js_1 = require("./impl/registration_impl.js");
Object.defineProperty(exports, "mutationGeneric", { enumerable: true, get: function () { return registration_impl_js_1.mutationGeneric; } });
Object.defineProperty(exports, "queryGeneric", { enumerable: true, get: function () { return registration_impl_js_1.queryGeneric; } });
Object.defineProperty(exports, "makeMutation", { enumerable: true, get: function () { return registration_impl_js_1.makeMutation; } });
Object.defineProperty(exports, "makeQuery", { enumerable: true, get: function () { return registration_impl_js_1.makeQuery; } });
__exportStar(require("./data_model.js"), exports);
//# sourceMappingURL=index.js.map