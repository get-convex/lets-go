import child_process from "child_process";
import chalk from "chalk";
import { exists, flushAndExit, functionsDir } from "./utils";
import { entryPoints } from "../bundler";
import { Command } from "commander";
import { readConfig } from "./config";
/** Run the TypeScript compiler, as configured during  */
export const typecheck = new Command("typecheck")
    .description("Run TypeScript typechecking on your Convex functions with `tsc --noEmit`.")
    .action(async () => {
    const { configPath, config: localConfig } = await readConfig(null, false);
    const typecheckResult = await typeCheckFunctions(functionsDir(configPath, localConfig.instanceConfig));
    if (typecheckResult === "cantTypeCheck" ||
        typecheckResult === "typecheckFailed") {
        console.error(chalk.gray("Typecheck failed"));
        return await flushAndExit(1);
    }
    else {
        console.error(chalk.green("Typecheck passed: `tsc --noEmit` completed with exit code 0."));
        return await flushAndExit(0);
    }
});
/**
 * Conditionally run a typecheck function and interpret the result.
 *
 * If typeCheckMode === "disable", never run the typecheck function.
 * If typeCheckMode === "enable", run the typecheck and crash if typechecking
 * fails or we can't find tsc.
 * If typeCheckMode === "try", try and run the typecheck. crash if typechecking
 * fails but don't worry if tsc is missing and we can't run it.
 */
export async function processTypeCheckResult(typeCheckMode, runTypeCheck) {
    if (typeCheckMode === "disable") {
        return;
    }
    const result = await runTypeCheck();
    if ((result === "cantTypeCheck" && typeCheckMode === "enable") ||
        result === "typecheckFailed") {
        console.error(chalk.gray("To ignore failing typecheck, use `--typecheck=disable`."));
        return await flushAndExit(1);
    }
}
// Runs TypeScript compiler to typecheck Convex query and mutation functions.
export async function typeCheckFunctions(functionsDir) {
    const toCheck = await entryPoints(functionsDir, false);
    return doTypeCheck(toCheck);
}
export async function doTypeCheck(entryPoints) {
    // usually there's a node_modules/.bin in this directory
    if (!(await exists("node_modules/.bin/tsc"))) {
        console.error(`Can't find TypeScript compiler \`tsc\` to use to typecheck Convex functions.`);
        // give up; there are lots of other ways to run TypeScript,
        // plus maybe the user isn't using TypeScript.
        return "cantTypeCheck";
    }
    // TODO try to override tsconfig? Examine nearest tsconfig? use a custom tsconfig?
    // suggest that users
    try {
        // In the future, we'll want to create a temp tsconfig here that inherits
        // from the first ancestor directory with a tsconfig.json as described in
        // https://github.com/microsoft/TypeScript/issues/27379
        child_process.execFileSync("node_modules/.bin/tsc", [
            ...entryPoints,
            "--noEmit",
            "--esModuleInterop",
            "--allowJs", // just a guess!
        ], { stdio: "inherit" });
    }
    catch (e) {
        console.error(chalk.red("TypeScript typecheck via `tsc` failed."));
        return "typecheckFailed";
    }
    return "success";
}
//# sourceMappingURL=typecheck.js.map