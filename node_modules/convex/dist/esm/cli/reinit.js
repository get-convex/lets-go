import axios from "axios";
import { version } from "../index.js";
import chalk from "chalk";
import { Command } from "commander";
import { configName, envFilename, provisionHost, pullConfig, readEnv, writeAdminKey, writeInstanceConfig, } from "./config.js";
import { BETA_KEY_DEPRECATION_MESSAGE, BETA_KEY_OPTION, deprecationCheck, exists, flushAndExit, getAuthHeader, printServerErr, } from "./utils.js";
export const reinit = new Command("reinit")
    .description("Reinitialize a Convex app in the local directory if you've lost your convex.json and .env.local files")
    .addOption(BETA_KEY_OPTION)
    .option("--deployment-name <name>", "The name of the deployment you'd like to reinitialize. If you don't know it, you can list all of your deployments with `convex list-deployments`.")
    .option("--deployment-type <type>", "Type of deployment to create (`convex.<type>.json`). Defaults to `convex.json`")
    .action(async (options) => {
    const deploymentType = options.deploymentType ?? null;
    const configFn = configName(deploymentType);
    if (await exists(configFn)) {
        console.error(chalk.red(`File "${configFn}" already exists.`));
        console.error("If you'd like to regenerate it, delete the file and rerun `convex reinit`");
        return await flushAndExit(1);
    }
    const envFn = envFilename(deploymentType);
    const env = await readEnv(deploymentType);
    if (env !== null) {
        console.error(chalk.red(`File "${envFn}" already exists.`));
        console.error("If you'd like to regenerate it, delete the file and rerun `convex reinit`");
        return await flushAndExit(1);
    }
    const deploymentName = options.deploymentName;
    if (deploymentName === undefined) {
        console.error(chalk.red(`The "--deployment-name" flag is required to reinitialize a project.`));
        console.error(chalk.red("If you don't know your deployment name, you can list all of your deployments with `convex list-deployments`."));
        return await flushAndExit(1);
    }
    if (options.betaKey) {
        console.error(chalk.yellow(BETA_KEY_DEPRECATION_MESSAGE));
    }
    const authHeader = await getAuthHeader();
    const headers = authHeader
        ? { Authorization: authHeader }
        : {};
    const url = `${provisionHost}/api/${version}/reinitialize`;
    const client = axios.create();
    let data;
    try {
        const response = await client.post(url, {
            betaKey: options.betaKey,
            instanceName: deploymentName,
        }, { headers });
        deprecationCheck(response);
        data = response.data;
    }
    catch (err) {
        console.error(chalk.red("Error: Unable to reinitialize deployment"));
        printServerErr(err);
        return await flushAndExit(1, err);
    }
    if (deploymentName !== data.instanceName) {
        throw new Error(`Reinitialized different deployment ${data.instanceName}, expected ${deploymentName}`);
    }
    const instanceOrigin = data.url;
    const adminKey = data.adminKey;
    const { instanceConfig } = await pullConfig(instanceOrigin, adminKey);
    await writeAdminKey(options.deploymentType, adminKey);
    await writeInstanceConfig(options.deploymentType, instanceConfig);
    console.log(chalk.green(`Successfully reinitialized ${deploymentName}!`));
    console.log("Configuration settings have been written to", chalk.bold(configFn));
    console.log("The admin key was written to", chalk.bold(envFn));
});
//# sourceMappingURL=reinit.js.map