import { AxiosResponse } from "axios";
import { Option } from "commander";
import { InstanceConfig } from "./config.js";
/** Prompt for keyboard input with the given `query` string and return a promise
 * that resolves to the input. */
export declare function prompt(query: string): Promise<unknown>;
/**
 * Exits the program after flushing the Sentry client, optionally reporting a passed exception.
 *
 * Callers should `return await flushAndExit(...)` to ensure that control flow is blocked until completion.
 * @param exitCode Exit code for the program (should be non-zero in case of error)
 * @param err Optional exception to be reported to Sentry. Generally this should be reserved for "unexpected" fatal errors rather than clear developer errors.
 * @returns Never returns, i.e. this function is diverging and returns `Promise<never>`.
 */
export declare function flushAndExit(exitCode: number, err?: any): Promise<never>;
export declare function printServerErr(err: any): void;
export declare function deprecationCheck(resp: AxiosResponse<any, any>): void;
export interface Package {
    name: string;
    version: string;
}
export declare function loadPackageJson(): Promise<Package[]>;
export declare function pkgVersionConsistencyCheck(origin: string): Promise<void>;
export declare const isConvexPackage: (elt: Package) => boolean;
/** Return a new array with elements of the passed in array sorted by a key lambda */
export declare const sorted: <T>(arr: T[], key: (el: T) => any) => T[];
export declare function exists(path: string): Promise<boolean>;
export declare function functionsDir(configPath: string, instanceConfig: InstanceConfig): string;
export declare function rootDirectory(): string;
export declare function globalConfigPath(): string;
export declare function getAuthHeader(): Promise<string | null>;
export declare type GlobalConfig = {
    accessToken: string;
};
export declare const BETA_KEY_DEPRECATION_MESSAGE = "Convex beta keys are deprecated. Please run `npx convex login` to log in.";
export declare const BETA_KEY_OPTION: Option;
/**
 * Polls an arbitrary function until a condition is met.
 *
 * @param fetch Function performing a fetch, returning resulting data.
 * @param condition This function will terminate polling when it returns `true`.
 * @param waitMs How long to wait in between fetches.
 * @returns The resulting data from `fetch`.
 */
export declare const poll: <Result>(fetch: () => Promise<Result>, condition: (data: Result) => boolean, waitMs?: number) => Promise<Result>;
//# sourceMappingURL=utils.d.ts.map