import { Command } from "commander";
import { readInstanceConfig, writeInstanceConfig } from "./config.js";
import inquirer from "inquirer";
import chalk from "chalk";
const list = new Command("list")
    .description("List the currently-configured identity providers")
    .action(async (_, command) => {
    const options = command.parent.opts();
    const { instanceConfig } = await readInstanceConfig(options.deploymentType);
    const auth = instanceConfig.authInfo;
    for (let i = 0; i < auth.length; i++) {
        console.log(`${i + 1}. Issuer: "${auth[i].domain}", Application ID: "${auth[i].applicationID}"`);
    }
});
const rm = new Command("remove")
    .description("Remove one or more identity providers from the config")
    .action(async (_, command) => {
    const options = command.parent.opts();
    const { instanceConfig } = await readInstanceConfig(options.deploymentType);
    const auth = instanceConfig.authInfo;
    if (auth.length == 0) {
        console.log(chalk.yellow("No identity providers configured -- nothing to remove."));
        return;
    }
    const answers = await inquirer.prompt([
        {
            type: "checkbox",
            message: "Choose which provider(s) to delete:",
            choices: auth.map(info => {
                return {
                    name: `Issuer: "${info.domain}", Application ID: "${info.applicationID}"`,
                    value: info,
                };
            }),
            name: "providers",
        },
    ]);
    const toRemove = answers.providers ?? [];
    if (toRemove.length == 0) {
        console.log(chalk.green("No providers selected for removal."));
        return;
    }
    const newAuth = auth.filter(oldInfo => toRemove.indexOf(oldInfo) < 0);
    if (options.verbose) {
        console.log(chalk.bold(`Removing ${toRemove.length} identity provider(s). After this operation, the following provider(s) will remain:`));
        for (let i = 0; i < newAuth.length; i++) {
            console.log(`${i + 1}. Issuer: "${newAuth[i].domain}", Application ID: "${newAuth[i].applicationID}"`);
        }
        prompt("Press enter to continue or ctrl-C to abort.\n");
    }
    const newConfig = instanceConfig;
    newConfig.authInfo = newAuth;
    await writeInstanceConfig(options.deploymentType, newConfig);
    console.log(chalk.green("Configuration updated. Run `npx convex push` to sync these changes with your backend."));
});
const add = new Command("add")
    .description("Add an identity provider to the config")
    .action(async (_, command) => {
    const options = command.parent.opts();
    const { instanceConfig } = await readInstanceConfig(options.deploymentType);
    const newProviders = [];
    async function ask() {
        await inquirer
            .prompt([
            {
                type: "input",
                name: "domain",
                message: "Enter the identity provider's URL, (e.g. `https://accounts.google.com`):",
                validate: iss => {
                    if (!iss.startsWith("https://")) {
                        return "URL must start with `https://`";
                    }
                    return true;
                },
            },
            {
                type: "input",
                name: "applicationID",
                message: "Enter your application/client ID with this identity provider:",
                validate: id => {
                    if (id.startsWith('"')) {
                        return "Client ID should not be quoted";
                    }
                    return true;
                },
            },
            {
                type: "confirm",
                name: "anotherOne",
                message: "Would you like to add another provider?",
                default: false,
            },
        ])
            .then(async (answers) => {
            newProviders.push({
                domain: answers.domain,
                applicationID: answers.applicationID,
            });
            if (answers.anotherOne) {
                await ask();
            }
        });
    }
    await ask();
    if (newProviders.length == 0) {
        console.log(chalk.yellow("No providers added; nothing to do."));
        return;
    }
    if (options.verbose) {
        console.log(chalk.bold("Will add the following identity providers:"));
        for (let i = 0; i < newProviders.length; i++) {
            console.log(`${i + 1}. Issuer: "${newProviders[i].domain}", Application ID: "${newProviders[i].applicationID}"`);
        }
        prompt("Press enter to continue or ctrl-C to abort.\n");
    }
    const config = instanceConfig;
    config.authInfo.push(...newProviders);
    await writeInstanceConfig(options.deploymentType, config);
    console.log(chalk.green("Configuration updated. Run `npx convex push` to sync these changes with your backend."));
});
export const auth = new Command("auth")
    .description("Modify the authentication settings for your Convex deployment")
    .option("--deployment-type <type>", "Type of deployment to edit the config for (`convex.<type>.json`). Defaults to `convex.json`")
    .option("-v, --verbose", "Show changes and prompt for confirmation")
    .addCommand(list)
    .addCommand(rm)
    .addCommand(add);
//# sourceMappingURL=auth.js.map