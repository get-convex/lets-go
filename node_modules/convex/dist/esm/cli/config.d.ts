import { Bundle } from "../bundler/index.js";
export declare const productionProvisionHost = "https://provision.convex.dev";
export declare const provisionHost: string;
/** Type representing auth configuration. */
export interface AuthInfo {
    applicationID: string;
    domain: string;
}
/** Type representing Convex deployment configuration. */
export interface InstanceConfig {
    instanceName: string;
    origin: string;
    functions: string;
    authInfo: AuthInfo[];
}
export interface Config {
    instanceConfig: InstanceConfig;
    modules: Bundle[];
    udfServerVersion?: string;
}
/** Parse object to InstanceConfig. */
export declare function parseConfig(obj: any): InstanceConfig;
export declare function configName(deployment: string | null): string;
export declare function configFilepath(configFn: string): Promise<string>;
/** Read configuration from a local `convex.json` file. */
export declare function readInstanceConfig(deployment: string | null): Promise<{
    instanceConfig: InstanceConfig;
    configPath: string;
}>;
/**
 * Given an {@link InstanceConfig}, add in the bundled modules to produce the
 * complete config.
 */
export declare function configFromInstanceConfig(instanceConfig: InstanceConfig, configPath: string, verbose: boolean): Promise<Config>;
/**
 * Read the config from `convex.json` and bundle all the modules.
 */
export declare function readConfig(deployment: string | null, verbose: boolean): Promise<{
    config: Config;
    configPath: string;
}>;
interface Env {
    adminKey: string;
}
export declare function mustReadEnv(deployment: string): Promise<Env>;
export declare function envFilename(deployment: string | null): string;
export declare function readEnv(deployment: string): Promise<Env | null>;
/** Write a README file in `{config/functions}/README.md` */
export declare function writeReadme(functionsDir: string): Promise<undefined>;
/** Write the config to `convex.json` in the current working directory. */
export declare function writeInstanceConfig(deployment: string, instanceConfig: InstanceConfig): Promise<undefined>;
export declare function writeAdminKey(deployment: string, adminKey: string): Promise<undefined>;
/** Pull configuration from the given remote origin. */
export declare function pullConfig(origin: string, adminKey: string): Promise<Config>;
export declare function configJSON(config: Config, adminKey: string): {
    version: string;
    config: InstanceConfig;
    modules: Bundle[];
    udfServerVersion: string | undefined;
    adminKey: string;
};
/** Push configuration to the given remote origin. */
export declare function pushConfig(config: Config, adminKey: string): Promise<void>;
declare type Files = {
    source: string;
    filename: string;
}[];
export declare type CodegenResponse = {
    success: true;
    files: Files;
} | {
    success: false;
    error: string;
};
/** Generate a human-readable diff between the two configs. */
export declare function diffConfig(oldConfig: Config, newConfig: Config, configPath: string, verbose: boolean): string;
export {};
//# sourceMappingURL=config.d.ts.map