import { jsonToConvex } from "@convex-dev/common";
import { performSyscall } from "./syscall.js";
import { filterBuilderImpl, serializeExpression, } from "./filter_builder_impl.js";
import { IndexRangeBuilderImpl, } from "./index_range_builder_impl.js";
export class TableImpl {
    constructor(tableName) {
        this.tableName = tableName;
    }
    primaryIndex() {
        return this.index("by_id");
    }
    index(indexName) {
        return new IndexedQueryImpl(this.tableName + "." + indexName);
    }
    fullTableScan() {
        return new QueryImpl({
            source: {
                type: "FullTableScan",
                tableName: this.tableName,
                order: "asc",
            },
            operators: [],
        });
    }
    order(order) {
        return this.fullTableScan().order(order);
    }
    filter(predicate) {
        return this.fullTableScan().filter(predicate);
    }
    limit(n) {
        return this.fullTableScan().limit(n);
    }
    collect() {
        return this.fullTableScan().collect();
    }
    take(n) {
        return this.fullTableScan().take(n);
    }
    paginate(cursor, options) {
        return this.fullTableScan().paginate(cursor, options);
    }
    first() {
        return this.fullTableScan().first();
    }
    unique() {
        return this.fullTableScan().unique();
    }
    [Symbol.asyncIterator]() {
        return this.fullTableScan()[Symbol.asyncIterator]();
    }
}
/**
 * @param type Whether the query was consumed or closed.
 * @throws An error indicating the query has been closed.
 */
function throwClosedError(type) {
    throw new Error(type === "consumed"
        ? "This query is closed and can't emit any more values."
        : "This query has been chained with another operator and can't be reused.");
}
class QueryImpl {
    constructor(query) {
        this.state = { type: "preparing", query };
    }
    takeQuery() {
        if (this.state.type !== "preparing") {
            throw new Error("A query can only be chained once and can't be chained after iteration begins.");
        }
        const query = this.state.query;
        this.state = { type: "closed" };
        return query;
    }
    startQuery() {
        if (this.state.type === "executing") {
            throw new Error("Iteration can only begin on a query once.");
        }
        if (this.state.type === "closed" || this.state.type === "consumed") {
            throwClosedError(this.state.type);
        }
        const query = this.state.query;
        const { queryId } = performSyscall("queryStream", { query });
        this.state = { type: "executing", queryId };
        return queryId;
    }
    closeQuery() {
        if (this.state.type === "executing") {
            const queryId = this.state.queryId;
            performSyscall("queryCleanup", { queryId });
        }
        this.state = { type: "consumed" };
    }
    order(order) {
        const query = this.takeQuery();
        query.source.order = order;
        return new QueryImpl(query);
    }
    filter(predicate) {
        const query = this.takeQuery();
        query.operators.push({
            filter: serializeExpression(predicate(filterBuilderImpl)),
        });
        return new QueryImpl(query);
    }
    limit(n) {
        const query = this.takeQuery();
        query.operators.push({ limit: n });
        return new QueryImpl(query);
    }
    [Symbol.asyncIterator]() {
        this.startQuery();
        return this;
    }
    next() {
        if (this.state.type === "closed" || this.state.type === "consumed") {
            throwClosedError(this.state.type);
        }
        // Allow calling `.next()` when the query is in "preparing" state to implicitly start the
        // query. This allows the developer to call `.next()` on the query without having to use
        // a `for await` statement.
        const queryId = this.state.type === "preparing" ? this.startQuery() : this.state.queryId;
        const { value, done } = performSyscall("queryStreamNext", { queryId });
        if (done) {
            this.closeQuery();
        }
        const convexValue = jsonToConvex(value);
        return Promise.resolve({ value: convexValue, done });
    }
    return() {
        this.closeQuery();
        return Promise.resolve({ done: true, value: undefined });
    }
    paginate(cursor, options) {
        const query = this.takeQuery();
        const pageSize = options?.pageSize ?? null;
        const maximumRowsRead = options?.maximumRowsRead ?? null;
        const { page, isDone, continueCursor } = performSyscall("queryPage", {
            query,
            cursor,
            pageSize,
            maximumRowsRead,
        });
        const result = {
            page: page.map(jsonToConvex),
            isDone,
            continueCursor,
        };
        return Promise.resolve(result);
    }
    async collect() {
        const out = [];
        for await (const item of this) {
            out.push(item);
        }
        return out;
    }
    async take(n) {
        return this.limit(n).collect();
    }
    async first() {
        const first_array = await this.take(1);
        return first_array.length === 0 ? null : first_array[0];
    }
    async unique() {
        const first_two_array = await this.take(2);
        if (first_two_array.length === 0) {
            throw new Error("unique() query found no results");
        }
        if (first_two_array.length === 2) {
            throw new Error("unique() query returned more than one result");
        }
        return first_two_array[0];
    }
}
class IndexedQueryImpl {
    constructor(indexName) {
        this.indexName = indexName;
    }
    range(indexRange) {
        const rangeBuilder = indexRange(IndexRangeBuilderImpl.new());
        return new QueryImpl({
            source: {
                type: "IndexRange",
                indexName: this.indexName,
                range: rangeBuilder.export(),
                order: "asc",
            },
            operators: [],
        });
    }
}
//# sourceMappingURL=query_impl.js.map