import { Value } from "@convex-dev/common";
/**
 * A document stored in Convex.
 * @public
 */
export declare type GenericDocument = Record<string, Value>;
/**
 * A type describing the ordered fields in an index.
 *
 * These can either be field names (like "name") or references to fields on
 * nested objects (like "properties.name").
 * @public
 */
export declare type GenericIndexFields = string[];
/**
 * A type describing the indexes in a table.
 *
 * It's a map from index name to fields in the index.
 * @public
 */
export declare type GenericTableIndexes = Record<string, GenericIndexFields>;
/**
 * The type of a field in an index.
 *
 * Note that this supports both simple fields like "name" and nested fields like
 * "properties.name".
 *
 * @public
 */
export declare type IndexFieldType<Document extends GenericDocument, FieldPath extends string> = FieldPath extends `${infer First}.${infer Second}` ? IndexFieldType<Document[First] & GenericDocument, Second> : Document[FieldPath];
/**
 * A type describing the document type and indexes in a table.
 * @public
 */
export declare type GenericTableInfo = {
    document: GenericDocument;
    indexes: GenericTableIndexes;
};
/**
 * The type of a document in a table for a given {@link GenericTableInfo}.
 * @public
 */
export declare type DocumentByInfo<TableInfo extends GenericTableInfo> = TableInfo["document"];
/**
 * The names of indexes in a table for a given {@link GenericTableInfo}.
 * @public
 */
export declare type IndexNames<TableInfo extends GenericTableInfo> = keyof TableInfo["indexes"];
/**
 * Extract the fields of an index from a {@link GenericTableInfo} by name.
 * @public
 */
export declare type NamedIndex<TableInfo extends GenericTableInfo, IndexName extends IndexNames<TableInfo>> = TableInfo["indexes"][IndexName];
/**
 * A type describing the tables in a Convex deployment.
 *
 * This is designed to be code generated with `npx convex codegen`.
 * @public
 */
export declare type GenericDataModel = Record<string, GenericTableInfo>;
/**
 * A {@link GenericDataModel} that considers documents to be `any` and does not
 * support indexes.
 *
 * This is the default before a schema is defined.
 * @public
 */
export declare type AnyDataModel = Record<string, {
    document: any;
    indexes: {};
}>;
/**
 * A type of all of the table names defined in a {@link GenericDataModel}.
 * @public
 */
export declare type TableNames<GenericDataModel> = keyof GenericDataModel;
/**
 * Extract the `TableInfo` for a table in a {@link GenericDataModel} by table
 * name.
 *
 * @public
 */
export declare type NamedTableInfo<DataModel extends GenericDataModel, TableName extends keyof DataModel> = DataModel[TableName];
/**
 * The type of a document in a {@link GenericDataModel} by table name.
 * @public
 */
export declare type DocumentByName<DataModel extends GenericDataModel, TableName extends TableNames<DataModel>> = DocumentByInfo<NamedTableInfo<DataModel, TableName>>;
//# sourceMappingURL=data_model.d.ts.map