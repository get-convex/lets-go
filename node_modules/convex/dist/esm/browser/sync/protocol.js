import * as Base64 from "base64-js";
import { z } from "zod";
import Long from "long";
/**
 * Shared schema
 */
// Taken from https://github.com/colinhacks/zod#json-type
const jsonSchema = z.lazy(() => z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.null(),
    z.array(jsonSchema),
    z.record(jsonSchema),
]));
const u64Schema = z
    .string()
    .refine(arg => Base64.byteLength(arg) == 8)
    .transform(arg => {
    const integerBytes = Base64.toByteArray(arg);
    return Long.fromBytesLE(Array.from(integerBytes), true);
});
/**
 * Validator for {@link QueryId}.
 */
export const queryIdSchema = z.number().int().nonnegative();
const querySetVersionSchema = z.number().int().nonnegative();
const mutationIdSchema = z.number().int().nonnegative();
const identityVersionSchema = z.number().int().nonnegative();
/**
 * Client message schema
 */
const connectSchema = z.object({
    type: z.literal("Connect"),
    sessionId: z.string(),
    connectionCount: z.number().int().nonnegative(),
});
const addQuerySchema = z.object({
    type: z.literal("Add"),
    queryId: queryIdSchema,
    udfPath: z.string(),
    args: z.array(jsonSchema),
});
const removeQuerySchema = z.object({
    type: z.literal("Remove"),
    queryId: queryIdSchema,
});
const querySetModificationSchema = z.object({
    type: z.literal("ModifyQuerySet"),
    baseVersion: querySetVersionSchema,
    newVersion: querySetVersionSchema,
    modifications: z.array(z.union([addQuerySchema, removeQuerySchema])),
});
const mutationSchema = z.object({
    type: z.literal("Mutation"),
    mutationId: mutationIdSchema,
    udfPath: z.string(),
    args: z.array(jsonSchema),
});
const authenticateSchema = z.discriminatedUnion("tokenType", [
    z.object({
        type: z.literal("Authenticate"),
        tokenType: z.literal("Admin"),
        value: z.string(),
        baseVersion: identityVersionSchema,
    }),
    z.object({
        type: z.literal("Authenticate"),
        tokenType: z.literal("User"),
        value: z.string(),
        baseVersion: identityVersionSchema,
    }),
    z.object({
        type: z.literal("Authenticate"),
        tokenType: z.literal("None"),
        baseVersion: identityVersionSchema,
    }),
]);
const clientSchema = z.union([
    connectSchema,
    querySetModificationSchema,
    mutationSchema,
    authenticateSchema,
]);
/**
 * Server message schema
 */
const tsSchema = u64Schema;
const logLinesSchema = z.array(z.string());
const stateVersionSchema = z.object({
    querySet: queryIdSchema,
    ts: tsSchema,
    identity: identityVersionSchema,
});
const stateModificationSchema = z.discriminatedUnion("type", [
    z.object({
        type: z.literal("QueryUpdated"),
        queryId: queryIdSchema,
        value: jsonSchema,
        logLines: logLinesSchema,
    }),
    z.object({
        type: z.literal("QueryFailed"),
        queryId: queryIdSchema,
        errorMessage: z.string(),
        logLines: logLinesSchema,
    }),
    z.object({
        type: z.literal("QueryRemoved"),
        queryId: queryIdSchema,
    }),
]);
const transitionSchema = z.object({
    type: z.literal("Transition"),
    startVersion: stateVersionSchema,
    endVersion: stateVersionSchema,
    modifications: z.array(stateModificationSchema),
});
const mutationSuccessSchema = z.object({
    type: z.literal("MutationResponse"),
    mutationId: mutationIdSchema,
    success: z.literal(true),
    result: jsonSchema,
    ts: tsSchema,
    logLines: logLinesSchema,
});
const mutationFailedSchema = z.object({
    type: z.literal("MutationResponse"),
    mutationId: mutationIdSchema,
    success: z.literal(false),
    result: z.string(),
    logLines: logLinesSchema,
});
const mutationResponseSchema = z.discriminatedUnion("success", [
    mutationSuccessSchema,
    mutationFailedSchema,
]);
const fatalErrorSchema = z.object({
    type: z.literal("FatalError"),
    error: z.string(),
});
export const serverSchema = z.union([
    transitionSchema,
    mutationResponseSchema,
    fatalErrorSchema,
]);
//# sourceMappingURL=protocol.js.map