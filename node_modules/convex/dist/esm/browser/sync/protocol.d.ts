import { z } from "zod";
import { JSONValue } from "@convex-dev/common";
import Long from "long";
/**
 * Validator for {@link QueryId}.
 */
export declare const queryIdSchema: z.ZodNumber;
/**
 * Unique nonnegative integer identifying a single query.
 */
export declare type QueryId = z.infer<typeof queryIdSchema>;
declare const querySetVersionSchema: z.ZodNumber;
export declare type QuerySetVersion = z.infer<typeof querySetVersionSchema>;
declare const mutationIdSchema: z.ZodNumber;
export declare type MutationId = z.infer<typeof mutationIdSchema>;
declare const identityVersionSchema: z.ZodNumber;
export declare type IdentityVersion = z.infer<typeof identityVersionSchema>;
declare const addQuerySchema: z.ZodObject<{
    type: z.ZodLiteral<"Add">;
    queryId: z.ZodNumber;
    udfPath: z.ZodString;
    args: z.ZodArray<z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "Add";
    queryId: number;
    udfPath: string;
    args: JSONValue[];
}, {
    type: "Add";
    queryId: number;
    udfPath: string;
    args: JSONValue[];
}>;
export declare type AddQuery = z.infer<typeof addQuerySchema>;
declare const removeQuerySchema: z.ZodObject<{
    type: z.ZodLiteral<"Remove">;
    queryId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "Remove";
    queryId: number;
}, {
    type: "Remove";
    queryId: number;
}>;
export declare type RemoveQuery = z.infer<typeof removeQuerySchema>;
declare const querySetModificationSchema: z.ZodObject<{
    type: z.ZodLiteral<"ModifyQuerySet">;
    baseVersion: z.ZodNumber;
    newVersion: z.ZodNumber;
    modifications: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"Add">;
        queryId: z.ZodNumber;
        udfPath: z.ZodString;
        args: z.ZodArray<z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "Add";
        queryId: number;
        udfPath: string;
        args: JSONValue[];
    }, {
        type: "Add";
        queryId: number;
        udfPath: string;
        args: JSONValue[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Remove">;
        queryId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Remove";
        queryId: number;
    }, {
        type: "Remove";
        queryId: number;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "ModifyQuerySet";
    baseVersion: number;
    newVersion: number;
    modifications: ({
        type: "Add";
        queryId: number;
        udfPath: string;
        args: JSONValue[];
    } | {
        type: "Remove";
        queryId: number;
    })[];
}, {
    type: "ModifyQuerySet";
    baseVersion: number;
    newVersion: number;
    modifications: ({
        type: "Add";
        queryId: number;
        udfPath: string;
        args: JSONValue[];
    } | {
        type: "Remove";
        queryId: number;
    })[];
}>;
export declare type QuerySetModification = z.infer<typeof querySetModificationSchema>;
declare const mutationSchema: z.ZodObject<{
    type: z.ZodLiteral<"Mutation">;
    mutationId: z.ZodNumber;
    udfPath: z.ZodString;
    args: z.ZodArray<z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "Mutation";
    udfPath: string;
    args: JSONValue[];
    mutationId: number;
}, {
    type: "Mutation";
    udfPath: string;
    args: JSONValue[];
    mutationId: number;
}>;
export declare type Mutation = z.infer<typeof mutationSchema>;
declare const authenticateSchema: z.ZodDiscriminatedUnion<"tokenType", z.Primitive, z.ZodObject<{
    type: z.ZodLiteral<"Authenticate">;
    tokenType: z.ZodLiteral<"Admin">;
    value: z.ZodString;
    baseVersion: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "Authenticate";
    baseVersion: number;
    tokenType: "Admin";
}, {
    value: string;
    type: "Authenticate";
    baseVersion: number;
    tokenType: "Admin";
}> | z.ZodObject<{
    type: z.ZodLiteral<"Authenticate">;
    tokenType: z.ZodLiteral<"User">;
    value: z.ZodString;
    baseVersion: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "Authenticate";
    baseVersion: number;
    tokenType: "User";
}, {
    value: string;
    type: "Authenticate";
    baseVersion: number;
    tokenType: "User";
}> | z.ZodObject<{
    type: z.ZodLiteral<"Authenticate">;
    tokenType: z.ZodLiteral<"None">;
    baseVersion: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "Authenticate";
    baseVersion: number;
    tokenType: "None";
}, {
    type: "Authenticate";
    baseVersion: number;
    tokenType: "None";
}>>;
export declare type Authenticate = z.infer<typeof authenticateSchema>;
declare const clientSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"Connect">;
    sessionId: z.ZodString;
    connectionCount: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "Connect";
    sessionId: string;
    connectionCount: number;
}, {
    type: "Connect";
    sessionId: string;
    connectionCount: number;
}>, z.ZodObject<{
    type: z.ZodLiteral<"ModifyQuerySet">;
    baseVersion: z.ZodNumber;
    newVersion: z.ZodNumber;
    modifications: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"Add">;
        queryId: z.ZodNumber;
        udfPath: z.ZodString;
        args: z.ZodArray<z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "Add";
        queryId: number;
        udfPath: string;
        args: JSONValue[];
    }, {
        type: "Add";
        queryId: number;
        udfPath: string;
        args: JSONValue[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Remove">;
        queryId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Remove";
        queryId: number;
    }, {
        type: "Remove";
        queryId: number;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "ModifyQuerySet";
    baseVersion: number;
    newVersion: number;
    modifications: ({
        type: "Add";
        queryId: number;
        udfPath: string;
        args: JSONValue[];
    } | {
        type: "Remove";
        queryId: number;
    })[];
}, {
    type: "ModifyQuerySet";
    baseVersion: number;
    newVersion: number;
    modifications: ({
        type: "Add";
        queryId: number;
        udfPath: string;
        args: JSONValue[];
    } | {
        type: "Remove";
        queryId: number;
    })[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"Mutation">;
    mutationId: z.ZodNumber;
    udfPath: z.ZodString;
    args: z.ZodArray<z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "Mutation";
    udfPath: string;
    args: JSONValue[];
    mutationId: number;
}, {
    type: "Mutation";
    udfPath: string;
    args: JSONValue[];
    mutationId: number;
}>, z.ZodDiscriminatedUnion<"tokenType", z.Primitive, z.ZodObject<{
    type: z.ZodLiteral<"Authenticate">;
    tokenType: z.ZodLiteral<"Admin">;
    value: z.ZodString;
    baseVersion: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "Authenticate";
    baseVersion: number;
    tokenType: "Admin";
}, {
    value: string;
    type: "Authenticate";
    baseVersion: number;
    tokenType: "Admin";
}> | z.ZodObject<{
    type: z.ZodLiteral<"Authenticate">;
    tokenType: z.ZodLiteral<"User">;
    value: z.ZodString;
    baseVersion: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "Authenticate";
    baseVersion: number;
    tokenType: "User";
}, {
    value: string;
    type: "Authenticate";
    baseVersion: number;
    tokenType: "User";
}> | z.ZodObject<{
    type: z.ZodLiteral<"Authenticate">;
    tokenType: z.ZodLiteral<"None">;
    baseVersion: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "Authenticate";
    baseVersion: number;
    tokenType: "None";
}, {
    type: "Authenticate";
    baseVersion: number;
    tokenType: "None";
}>>]>;
export declare type ClientMessage = z.infer<typeof clientSchema>;
declare const stateVersionSchema: z.ZodObject<{
    querySet: z.ZodNumber;
    ts: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Long, string>;
    identity: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    querySet: number;
    ts: Long;
    identity: number;
}, {
    querySet: number;
    ts: string;
    identity: number;
}>;
export declare type StateVersion = z.infer<typeof stateVersionSchema>;
declare const transitionSchema: z.ZodObject<{
    type: z.ZodLiteral<"Transition">;
    startVersion: z.ZodObject<{
        querySet: z.ZodNumber;
        ts: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Long, string>;
        identity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        querySet: number;
        ts: Long;
        identity: number;
    }, {
        querySet: number;
        ts: string;
        identity: number;
    }>;
    endVersion: z.ZodObject<{
        querySet: z.ZodNumber;
        ts: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Long, string>;
        identity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        querySet: number;
        ts: Long;
        identity: number;
    }, {
        querySet: number;
        ts: string;
        identity: number;
    }>;
    modifications: z.ZodArray<z.ZodDiscriminatedUnion<"type", z.Primitive, z.ZodObject<{
        type: z.ZodLiteral<"QueryUpdated">;
        queryId: z.ZodNumber;
        value: z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>;
        logLines: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        value: JSONValue;
        type: "QueryUpdated";
        queryId: number;
        logLines: string[];
    }, {
        value: JSONValue;
        type: "QueryUpdated";
        queryId: number;
        logLines: string[];
    }> | z.ZodObject<{
        type: z.ZodLiteral<"QueryFailed">;
        queryId: z.ZodNumber;
        errorMessage: z.ZodString;
        logLines: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "QueryFailed";
        queryId: number;
        logLines: string[];
        errorMessage: string;
    }, {
        type: "QueryFailed";
        queryId: number;
        logLines: string[];
        errorMessage: string;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"QueryRemoved">;
        queryId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "QueryRemoved";
        queryId: number;
    }, {
        type: "QueryRemoved";
        queryId: number;
    }>>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "Transition";
    modifications: ({
        value: JSONValue;
        type: "QueryUpdated";
        queryId: number;
        logLines: string[];
    } | {
        type: "QueryFailed";
        queryId: number;
        logLines: string[];
        errorMessage: string;
    } | {
        type: "QueryRemoved";
        queryId: number;
    })[];
    startVersion: {
        querySet: number;
        ts: Long;
        identity: number;
    };
    endVersion: {
        querySet: number;
        ts: Long;
        identity: number;
    };
}, {
    type: "Transition";
    modifications: ({
        value: JSONValue;
        type: "QueryUpdated";
        queryId: number;
        logLines: string[];
    } | {
        type: "QueryFailed";
        queryId: number;
        logLines: string[];
        errorMessage: string;
    } | {
        type: "QueryRemoved";
        queryId: number;
    })[];
    startVersion: {
        querySet: number;
        ts: string;
        identity: number;
    };
    endVersion: {
        querySet: number;
        ts: string;
        identity: number;
    };
}>;
export declare type Transition = z.infer<typeof transitionSchema>;
declare const mutationResponseSchema: z.ZodDiscriminatedUnion<"success", z.Primitive, z.ZodObject<{
    type: z.ZodLiteral<"MutationResponse">;
    mutationId: z.ZodNumber;
    success: z.ZodLiteral<true>;
    result: z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>;
    ts: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Long, string>;
    logLines: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: "MutationResponse";
    mutationId: number;
    ts: Long;
    logLines: string[];
    success: true;
    result: JSONValue;
}, {
    type: "MutationResponse";
    mutationId: number;
    ts: string;
    logLines: string[];
    success: true;
    result: JSONValue;
}> | z.ZodObject<{
    type: z.ZodLiteral<"MutationResponse">;
    mutationId: z.ZodNumber;
    success: z.ZodLiteral<false>;
    result: z.ZodString;
    logLines: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: "MutationResponse";
    mutationId: number;
    logLines: string[];
    success: false;
    result: string;
}, {
    type: "MutationResponse";
    mutationId: number;
    logLines: string[];
    success: false;
    result: string;
}>>;
export declare type MutationResponse = z.infer<typeof mutationResponseSchema>;
export declare const serverSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"Transition">;
    startVersion: z.ZodObject<{
        querySet: z.ZodNumber;
        ts: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Long, string>;
        identity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        querySet: number;
        ts: Long;
        identity: number;
    }, {
        querySet: number;
        ts: string;
        identity: number;
    }>;
    endVersion: z.ZodObject<{
        querySet: z.ZodNumber;
        ts: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Long, string>;
        identity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        querySet: number;
        ts: Long;
        identity: number;
    }, {
        querySet: number;
        ts: string;
        identity: number;
    }>;
    modifications: z.ZodArray<z.ZodDiscriminatedUnion<"type", z.Primitive, z.ZodObject<{
        type: z.ZodLiteral<"QueryUpdated">;
        queryId: z.ZodNumber;
        value: z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>;
        logLines: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        value: JSONValue;
        type: "QueryUpdated";
        queryId: number;
        logLines: string[];
    }, {
        value: JSONValue;
        type: "QueryUpdated";
        queryId: number;
        logLines: string[];
    }> | z.ZodObject<{
        type: z.ZodLiteral<"QueryFailed">;
        queryId: z.ZodNumber;
        errorMessage: z.ZodString;
        logLines: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "QueryFailed";
        queryId: number;
        logLines: string[];
        errorMessage: string;
    }, {
        type: "QueryFailed";
        queryId: number;
        logLines: string[];
        errorMessage: string;
    }> | z.ZodObject<{
        type: z.ZodLiteral<"QueryRemoved">;
        queryId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "QueryRemoved";
        queryId: number;
    }, {
        type: "QueryRemoved";
        queryId: number;
    }>>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "Transition";
    modifications: ({
        value: JSONValue;
        type: "QueryUpdated";
        queryId: number;
        logLines: string[];
    } | {
        type: "QueryFailed";
        queryId: number;
        logLines: string[];
        errorMessage: string;
    } | {
        type: "QueryRemoved";
        queryId: number;
    })[];
    startVersion: {
        querySet: number;
        ts: Long;
        identity: number;
    };
    endVersion: {
        querySet: number;
        ts: Long;
        identity: number;
    };
}, {
    type: "Transition";
    modifications: ({
        value: JSONValue;
        type: "QueryUpdated";
        queryId: number;
        logLines: string[];
    } | {
        type: "QueryFailed";
        queryId: number;
        logLines: string[];
        errorMessage: string;
    } | {
        type: "QueryRemoved";
        queryId: number;
    })[];
    startVersion: {
        querySet: number;
        ts: string;
        identity: number;
    };
    endVersion: {
        querySet: number;
        ts: string;
        identity: number;
    };
}>, z.ZodDiscriminatedUnion<"success", z.Primitive, z.ZodObject<{
    type: z.ZodLiteral<"MutationResponse">;
    mutationId: z.ZodNumber;
    success: z.ZodLiteral<true>;
    result: z.ZodType<JSONValue, z.ZodTypeDef, JSONValue>;
    ts: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, Long, string>;
    logLines: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: "MutationResponse";
    mutationId: number;
    ts: Long;
    logLines: string[];
    success: true;
    result: JSONValue;
}, {
    type: "MutationResponse";
    mutationId: number;
    ts: string;
    logLines: string[];
    success: true;
    result: JSONValue;
}> | z.ZodObject<{
    type: z.ZodLiteral<"MutationResponse">;
    mutationId: z.ZodNumber;
    success: z.ZodLiteral<false>;
    result: z.ZodString;
    logLines: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: "MutationResponse";
    mutationId: number;
    logLines: string[];
    success: false;
    result: string;
}, {
    type: "MutationResponse";
    mutationId: number;
    logLines: string[];
    success: false;
    result: string;
}>>, z.ZodObject<{
    type: z.ZodLiteral<"FatalError">;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    error: string;
    type: "FatalError";
}, {
    error: string;
    type: "FatalError";
}>]>;
export declare type ServerMessage = z.infer<typeof serverSchema>;
export {};
//# sourceMappingURL=protocol.d.ts.map